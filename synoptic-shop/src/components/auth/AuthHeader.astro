---
// src/components/auth/AuthHeader.astro - Updated with centralized auth state integration
---

<!-- Auth Section for Header -->
<div class="auth-section flex items-center space-x-4">
  
  <!-- Shopping Cart Button -->
  <button 
    id="cart-button" 
    class="relative p-2 text-gray-700 hover:text-gray-900 transition-colors"
    aria-label="Shopping cart"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 6H2m5 7v1m0 0v5a2 2 0 002 2h6a2 2 0 002-2v-5m-8 0h8"></path>
    </svg>
    
    <!-- Cart Count Badge -->
    <span 
      id="cart-count" 
      class="hidden absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
    >
      0
    </span>
  </button>
  
  <!-- Loading State (shown while auth is initializing) -->
  <div id="auth-loading" class="flex items-center">
    <div class="animate-pulse flex space-x-2">
      <div class="w-8 h-8 bg-gray-200 rounded-full"></div>
    </div>
  </div>

  <!-- Not Authenticated State -->
  <div id="auth-not-authenticated" class="hidden flex items-center space-x-3">
    <button 
      id="open-auth-modal" 
      class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors text-sm font-medium"
    >
      Sign In
    </button>
  </div>

  <!-- Authenticated State -->
  <div id="auth-authenticated" class="hidden flex items-center space-x-3">
    
    <!-- User Menu Dropdown -->
    <div class="relative" id="user-menu">
      <!-- User Menu Button -->
      <button 
        id="user-menu-button" 
        class="flex items-center space-x-2 text-gray-700 hover:text-gray-900 transition-colors p-2 rounded-lg hover:bg-gray-100"
        aria-expanded="false"
        aria-haspopup="true"
      >
        <!-- User Avatar -->
        <div class="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
          <span id="user-avatar-text" class="text-white text-sm font-medium">
            <!-- Will be populated with user initials -->
          </span>
        </div>
        
        <!-- User Name -->
        <span id="user-display-name" class="hidden sm:block text-sm font-medium">
          <!-- Will be populated with user name -->
        </span>
        
        <!-- Dropdown Arrow -->
        <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>

      <!-- Dropdown Menu -->
      <div 
        id="user-dropdown" 
        class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200"
        role="menu" 
        aria-orientation="vertical"
      >
        <!-- User Info -->
        <div class="px-4 py-3 border-b border-gray-100">
          <p class="text-sm font-medium text-gray-900" id="dropdown-user-name">
            <!-- User name -->
          </p>
          <p class="text-sm text-gray-500" id="dropdown-user-email">
            <!-- User email -->
          </p>
        </div>

        <!-- Menu Items -->
        <a 
          href="/account" 
          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
          role="menuitem"
        >
          <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          My Account
        </a>

        <a 
          href="/orders" 
          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
          role="menuitem"
        >
          <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
          </svg>
          My Orders
        </a>

        <a 
          href="https://app.synoptic.vision" 
          target="_blank"
          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
          role="menuitem"
        >
          <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
          </svg>
          Synoptic App
        </a>

        <div class="border-t border-gray-100 mt-1">
          <button 
            id="sign-out-btn" 
            class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
            role="menuitem"
          >
            <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
            Sign Out
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .text-primary {
    color: rgb(51, 73, 152);
  }
  
  .bg-primary {
    background-color: rgb(51, 73, 152);
  }
  
  .bg-primary-dark {
    background-color: rgb(41, 63, 142);
  }

  /* Dropdown animation */
  #user-dropdown {
    opacity: 0;
    transform: translateY(-10px);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  
  #user-dropdown.show {
    opacity: 1;
    transform: translateY(0);
  }

  /* Loading animation */
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Hover states */
  .hover\:bg-primary-dark:hover {
    background-color: rgb(41, 63, 142);
  }
</style>

<script>
  // Integration with centralized auth state manager
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üîê AuthHeader: Initializing with centralized auth state...');
    
    // DOM elements
    const authLoading = document.getElementById('auth-loading');
    const authNotAuthenticated = document.getElementById('auth-not-authenticated');
    const authAuthenticated = document.getElementById('auth-authenticated');
    const userAvatarText = document.getElementById('user-avatar-text');
    const userDisplayName = document.getElementById('user-display-name');
    const dropdownUserName = document.getElementById('dropdown-user-name');
    const dropdownUserEmail = document.getElementById('dropdown-user-email');
    const openAuthModalBtn = document.getElementById('open-auth-modal');
    const signOutBtn = document.getElementById('sign-out-btn');

    // Wait for centralized auth state to be available
    const waitForAuthState = () => {
      if (window.authState) {
        console.log('üîê AuthHeader: Centralized auth state available');
        initializeAuthHeader();
      } else {
        console.log('üîê AuthHeader: Waiting for auth state...');
        setTimeout(waitForAuthState, 100);
      }
    };

    const initializeAuthHeader = () => {
      // Subscribe to auth state changes
      window.authState.subscribe((user) => {
        console.log('üîê AuthHeader: Auth state changed:', user ? '‚úÖ Authenticated' : '‚ùå Not authenticated');
        updateAuthUI(user);
      });

      // Get current auth state immediately if available
      window.authState.getAuthState().then((authState) => {
        console.log('üîê AuthHeader: Initial auth state:', authState);
        updateAuthUI(authState.user);
      }).catch((error) => {
        console.error('üîê AuthHeader: Error getting initial auth state:', error);
        showNotAuthenticated();
      });
    };

    const updateAuthUI = (user) => {
      if (user) {
        showAuthenticated(user);
      } else {
        showNotAuthenticated();
      }
    };

    const showAuthenticated = (user) => {
      console.log('üîê AuthHeader: Showing authenticated UI for:', user.email);
      
      // Hide loading and not-authenticated states
      if (authLoading) authLoading.classList.add('hidden');
      if (authNotAuthenticated) authNotAuthenticated.classList.add('hidden');
      
      // Show authenticated state
      if (authAuthenticated) authAuthenticated.classList.remove('hidden');

      // Update user info
      const displayName = user.displayName || user.email.split('@')[0];
      const initials = getInitials(displayName);

      if (userAvatarText) userAvatarText.textContent = initials;
      if (userDisplayName) userDisplayName.textContent = displayName;
      if (dropdownUserName) dropdownUserName.textContent = displayName;
      if (dropdownUserEmail) dropdownUserEmail.textContent = user.email;
    };

    const showNotAuthenticated = () => {
      console.log('üîê AuthHeader: Showing not authenticated UI');
      
      // Hide loading and authenticated states
      if (authLoading) authLoading.classList.add('hidden');
      if (authAuthenticated) authAuthenticated.classList.add('hidden');
      
      // Show not authenticated state
      if (authNotAuthenticated) authNotAuthenticated.classList.remove('hidden');
    };

    const getInitials = (name) => {
      return name
        .split(' ')
        .map(word => word.charAt(0))
        .join('')
        .toUpperCase()
        .substring(0, 2);
    };

    // Event listeners
    if (openAuthModalBtn) {
      openAuthModalBtn.addEventListener('click', () => {
        console.log('üîê AuthHeader: Opening auth modal');
        if (window.authHandler) {
          window.authHandler.openModal('signin');
        } else {
          // Fallback - dispatch custom event
          window.dispatchEvent(new CustomEvent('openAuthModal', { 
            detail: { mode: 'signin' } 
          }));
        }
      });
    }

    // Cart button event listener
    const cartButton = document.getElementById('cart-button');
    if (cartButton) {
      cartButton.addEventListener('click', () => {
        console.log('üõí AuthHeader: Opening cart drawer');
        if (window.cartHandler) {
          window.cartHandler.openDrawer();
        } else {
          // Fallback - dispatch custom event
          window.dispatchEvent(new CustomEvent('openCartDrawer'));
        }
      });
    }

    // Subscribe to cart state changes for count updates
    const updateCartCount = () => {
      const cartCount = document.getElementById('cart-count');
      if (cartCount && window.cartManager) {
        const itemCount = window.cartManager.getItemCount();
        if (itemCount > 0) {
          cartCount.textContent = itemCount;
          cartCount.classList.remove('hidden');
        } else {
          cartCount.classList.add('hidden');
        }
      }
    };

    // Check for cart manager and subscribe to updates
    const initCartIntegration = () => {
      if (window.cartManager) {
        console.log('üõí AuthHeader: Cart manager available, subscribing to updates');
        window.cartManager.subscribe(() => {
          updateCartCount();
        });
        updateCartCount(); // Initial update
      } else {
        console.log('üõí AuthHeader: Waiting for cart manager...');
        setTimeout(initCartIntegration, 100);
      }
    };

    // Initialize cart integration
    initCartIntegration();

    if (signOutBtn) {
      signOutBtn.addEventListener('click', () => {
        console.log('üîê AuthHeader: Sign out clicked');
        if (window.authHandler) {
          window.authHandler.handleSignOut();
        } else {
          // Fallback - try direct Firebase sign out
          import('../../lib/firebase.js').then(({ signOutUser }) => {
            signOutUser().then(() => {
              console.log('üîê AuthHeader: Sign out successful');
              // Redirect to home page if on protected page
              const protectedPaths = ['/orders', '/account'];
              if (protectedPaths.some(path => window.location.pathname.includes(path))) {
                window.location.href = '/';
              }
            });
          });
        }
      });
    }

    // Dropdown functionality
    setupDropdown();

    // Start the auth state initialization
    waitForAuthState();
  });

  // Dropdown menu functionality
  function setupDropdown() {
    const userMenuButton = document.getElementById('user-menu-button');
    const userDropdown = document.getElementById('user-dropdown');
    
    if (userMenuButton && userDropdown) {
      userMenuButton.addEventListener('click', function(e) {
        e.stopPropagation();
        const isHidden = userDropdown.classList.contains('hidden');
        
        if (isHidden) {
          userDropdown.classList.remove('hidden');
          setTimeout(() => userDropdown.classList.add('show'), 10);
          userMenuButton.setAttribute('aria-expanded', 'true');
        } else {
          userDropdown.classList.remove('show');
          setTimeout(() => userDropdown.classList.add('hidden'), 200);
          userMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!userMenuButton.contains(e.target) && !userDropdown.contains(e.target)) {
          userDropdown.classList.remove('show');
          setTimeout(() => userDropdown.classList.add('hidden'), 200);
          userMenuButton.setAttribute('aria-expanded', 'false');
        }
      });

      // Close dropdown when pressing escape
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && !userDropdown.classList.contains('hidden')) {
          userDropdown.classList.remove('show');
          setTimeout(() => userDropdown.classList.add('hidden'), 200);
          userMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
    }
  }
</script>