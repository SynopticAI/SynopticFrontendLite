---
// src/components/auth/AuthHeader.astro - FIXED with working cart counter
---

<!-- Auth Section for Header -->
<div class="auth-section flex items-center space-x-4">
  
  <!-- Shopping Cart Button with FIXED Counter -->
  <button 
    id="cart-button" 
    class="relative p-2 text-gray-700 hover:text-gray-900 transition-colors dark:text-gray-300 dark:hover:text-white"
    aria-label="Shopping cart"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 6H2m5 7v1m0 0v5a2 2 0 002 2h6a2 2 0 002-2v-5m-8 0h8"></path>
    </svg>
    
    <!-- Cart Count Badge - FIXED implementation -->
    <span 
      id="cart-count" 
      class="hidden absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-medium"
    >
      0
    </span>
  </button>
  
  <!-- Loading State (shown while auth is initializing) -->
  <div id="auth-loading" class="flex items-center">
    <div class="animate-pulse flex space-x-2">
      <div class="w-8 h-8 bg-gray-200 rounded-full dark:bg-gray-600"></div>
    </div>
  </div>

  <!-- Not Authenticated State -->
  <div id="auth-not-authenticated" class="hidden flex items-center space-x-3">
    <button 
      id="open-auth-modal" 
      class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
    >
      Sign In
    </button>
  </div>

  <!-- Authenticated State -->
  <div id="auth-authenticated" class="hidden flex items-center space-x-3">
    
    <!-- User Menu Dropdown -->
    <div class="relative" id="user-menu">
      <!-- User Menu Button -->
      <button 
        id="user-menu-button" 
        class="flex items-center space-x-2 text-gray-700 hover:text-gray-900 transition-colors p-2 rounded-lg hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-700"
        aria-expanded="false"
        aria-haspopup="true"
      >
        <!-- User Avatar -->
        <div id="user-avatar" class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white text-sm font-medium">
          U
        </div>
        
        <!-- User Name -->
        <span id="user-name" class="hidden sm:block text-sm font-medium">
          User
        </span>
        
        <!-- Dropdown Arrow -->
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </button>

      <!-- Dropdown Menu -->
      <div 
        id="user-dropdown" 
        class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200 dark:bg-gray-800 dark:border-gray-700"
      >
        <a 
          href="/account" 
          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
        >
          My Account
        </a>
        <a 
          href="/orders" 
          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
        >
          Orders
        </a>
        <div class="border-t border-gray-200 dark:border-gray-600"></div>
        <button 
          id="sign-out-btn"
          class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
        >
          Sign Out
        </button>
      </div>
    </div>
  </div>
</div>

<!-- FIXED Cart Counter Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üîê AuthHeader: Initializing with FIXED cart counter...');
    
    // DOM elements
    const authLoading = document.getElementById('auth-loading');
    const authNotAuthenticated = document.getElementById('auth-not-authenticated');
    const authAuthenticated = document.getElementById('auth-authenticated');
    const openAuthModalBtn = document.getElementById('open-auth-modal');
    const userMenuButton = document.getElementById('user-menu-button');
    const userDropdown = document.getElementById('user-dropdown');
    const userAvatar = document.getElementById('user-avatar');
    const userName = document.getElementById('user-name');
    const signOutBtn = document.getElementById('sign-out-btn');
    const cartButton = document.getElementById('cart-button');
    const cartCount = document.getElementById('cart-count');
    
    let currentUser = null;
    let cartUpdateInterval = null;
    
    // FIXED: Cart counter update function
    const updateCartCount = async () => {
      try {
        if (window.swell) {
          const cart = await window.swell.cart.get();
          if (cart && cart.items && cart.items.length > 0) {
            const itemCount = cart.items.reduce((total, item) => total + (item.quantity || 0), 0);
            
            if (itemCount > 0) {
              cartCount.textContent = itemCount;
              cartCount.classList.remove('hidden');
              console.log('üõí AuthHeader: Cart count updated:', itemCount);
            } else {
              cartCount.classList.add('hidden');
            }
          } else {
            cartCount.classList.add('hidden');
          }
        }
      } catch (error) {
        console.log('üõí AuthHeader: Cart not available yet');
        cartCount.classList.add('hidden');
      }
    };
    
    // FIXED: Enhanced cart integration with multiple fallback methods
    const initCartIntegration = () => {
      console.log('üõí AuthHeader: Initializing cart integration...');
      
      // Method 1: Subscribe to cart manager if available
      if (window.cartManager && typeof window.cartManager.subscribe === 'function') {
        console.log('üõí AuthHeader: Cart manager available, subscribing to updates');
        try {
          window.cartManager.subscribe(() => {
            updateCartCount();
          });
          updateCartCount(); // Initial update
        } catch (error) {
          console.log('üõí AuthHeader: Cart manager subscription failed:', error);
        }
      }
      
      // Method 2: Direct cart polling as fallback
      clearInterval(cartUpdateInterval);
      cartUpdateInterval = setInterval(updateCartCount, 2000); // Check every 2 seconds
      updateCartCount(); // Initial update
      
      // Method 3: Listen for cart events
      window.addEventListener('cartUpdated', updateCartCount);
      window.addEventListener('itemAddedToCart', updateCartCount);
      window.addEventListener('cartRefreshed', updateCartCount);
      
      // Method 4: Listen for Swell auth completion
      window.addEventListener('swellAuthComplete', () => {
        setTimeout(updateCartCount, 500);
      });
      
      console.log('üõí AuthHeader: Cart integration initialized with multiple methods');
    };
    
    // Setup dropdown functionality
    const setupDropdown = () => {
      if (userMenuButton && userDropdown) {
        userMenuButton.addEventListener('click', (e) => {
          e.stopPropagation();
          const isHidden = userDropdown.classList.contains('hidden');
          
          if (isHidden) {
            userDropdown.classList.remove('hidden');
            userMenuButton.setAttribute('aria-expanded', 'true');
          } else {
            userDropdown.classList.add('hidden');
            userMenuButton.setAttribute('aria-expanded', 'false');
          }
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', () => {
          userDropdown.classList.add('hidden');
          userMenuButton.setAttribute('aria-expanded', 'false');
        });
        
        // Prevent dropdown from closing when clicking inside
        userDropdown.addEventListener('click', (e) => {
          e.stopPropagation();
        });
      }
    };
    
    // Wait for auth state to be ready
    const waitForAuthState = () => {
      if (window.authStateManager) {
        console.log('üîê AuthHeader: Centralized auth state available');
        
        // Subscribe to auth state changes
        window.authStateManager.subscribe((user) => {
          console.log('üîê AuthHeader: Auth state changed:', user ? '‚úÖ Authenticated' : '‚ùå Not authenticated');
          currentUser = user;
          updateAuthUI(user);
        });
        
        // Get initial auth state if ready
        if (window.authStateManager.isReady) {
          const user = window.authStateManager.getCurrentUser();
          console.log('üîê AuthHeader: Initial auth state:', user ? `‚úÖ ${user.email}` : '‚ùå Not authenticated');
          currentUser = user;
          updateAuthUI(user);
        }
        
      } else {
        console.log('üîê AuthHeader: Waiting for centralized auth state...');
        setTimeout(waitForAuthState, 100);
      }
    };
    
    // Update UI based on auth state
    const updateAuthUI = (user) => {
      if (user) {
        showAuthenticatedUI(user);
      } else {
        showNotAuthenticatedUI();
      }
    };
    
    // Show authenticated UI
    const showAuthenticatedUI = (user) => {
      console.log('üîê AuthHeader: Showing authenticated UI for:', user.email);
      
      // Hide loading and not-authenticated states
      if (authLoading) authLoading.classList.add('hidden');
      if (authNotAuthenticated) authNotAuthenticated.classList.add('hidden');
      
      // Show authenticated state
      if (authAuthenticated) authAuthenticated.classList.remove('hidden');
      
      // Update user info
      if (userAvatar) {
        const initials = getInitials(user.displayName || user.email);
        userAvatar.textContent = initials;
      }
      
      if (userName) {
        userName.textContent = user.displayName || user.email.split('@')[0];
      }
    };
    
    // Show not authenticated UI
    const showNotAuthenticatedUI = () => {
      console.log('üîê AuthHeader: Showing not authenticated UI');
      
      // Hide loading and authenticated states
      if (authLoading) authLoading.classList.add('hidden');
      if (authAuthenticated) authAuthenticated.classList.add('hidden');
      
      // Show not authenticated state
      if (authNotAuthenticated) authNotAuthenticated.classList.remove('hidden');
    };
    
    // Get user initials for avatar
    const getInitials = (name) => {
      return name
        .split(' ')
        .map(word => word.charAt(0))
        .join('')
        .toUpperCase()
        .substring(0, 2);
    };
    
    // Event listeners
    if (openAuthModalBtn) {
      openAuthModalBtn.addEventListener('click', () => {
        console.log('üîê AuthHeader: Opening auth modal');
        if (window.authHandler) {
          window.authHandler.openModal('signin');
        } else {
          // Fallback - dispatch custom event
          window.dispatchEvent(new CustomEvent('openAuthModal', { 
            detail: { mode: 'signin' } 
          }));
        }
      });
    }

    // Cart button event listener
    if (cartButton) {
      cartButton.addEventListener('click', () => {
        console.log('üõí AuthHeader: Opening cart drawer');
        if (window.cartHandler) {
          window.cartHandler.openDrawer();
        } else {
          // Fallback - dispatch custom event
          window.dispatchEvent(new CustomEvent('openCartDrawer'));
        }
      });
    }

    if (signOutBtn) {
      signOutBtn.addEventListener('click', () => {
        console.log('üîê AuthHeader: Sign out clicked');
        if (window.authHandler) {
          window.authHandler.handleSignOut();
        } else {
          // Fallback - try direct Firebase sign out
          import('../../lib/firebase.js').then(({ signOutUser }) => {
            signOutUser().then(() => {
              console.log('üîê AuthHeader: Sign out successful');
              // Redirect to home page if on protected page
              const protectedPaths = ['/orders', '/account'];
              if (protectedPaths.some(path => window.location.pathname.includes(path))) {
                window.location.href = '/';
              }
            });
          });
        }
      });
    }

    // Setup dropdown functionality
    setupDropdown();
    
    // FIXED: Initialize cart integration with enhanced methods
    initCartIntegration();

    // Start the auth state initialization
    waitForAuthState();
    
    // FIXED: Cleanup interval on page unload
    window.addEventListener('beforeunload', () => {
      if (cartUpdateInterval) {
        clearInterval(cartUpdateInterval);
      }
    });
  });
</script>