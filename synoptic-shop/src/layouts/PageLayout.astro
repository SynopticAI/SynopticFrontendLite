---
// src/layouts/PageLayout.astro - Updated with centralized auth state manager
import Layout from './Layout.astro';
import Header from '~/components/widgets/Header.astro';
import Footer from '~/components/widgets/Footer.astro';
import AuthModal from '~/components/auth/AuthModal.astro';
import CartDrawer from '~/components/cart/CartDrawer.astro';

import { headerData, footerData } from '~/navigation';
import type { MetaData } from '~/types';

export interface Props {
  metadata?: MetaData;
}

const { metadata } = Astro.props;
---

<Layout metadata={metadata}>
  <slot name="header">
    <Header {...headerData} isSticky showToggleTheme />
  </slot>
  
  <main>
    <slot />
  </main>
  
  <slot name="footer">
    <Footer {...footerData} />
  </slot>

  <!-- Firebase Auth Modal -->
  <AuthModal />
  
  <!-- Shopping Cart Drawer -->
  <CartDrawer />
</Layout>

<!-- Firebase, Auth, Cart, and Orders Scripts with Centralized Auth State -->
<script>
  // 🔐 CRITICAL: Import centralized auth state manager FIRST
  // This ensures auth state is available before other modules load
  import('../lib/auth-state-manager.js');
  
  // Import Firebase auth handler (now uses centralized auth)
  import('../scripts/auth-handler.js');
  
  // Import cart handler  
  import('../scripts/cart-handler.js');
  
  // Conditional imports for performance optimization
  const pathname = window.location.pathname;
  
  // Import orders handler for orders and account pages
  if (pathname.includes('/orders') || pathname.includes('/account')) {
    import('../scripts/orders-handler.js');
  }
  
  // Import checkout handler for checkout and cart pages
  if (pathname.includes('/checkout') || pathname.includes('/cart')) {
    import('../scripts/checkout-handler.js');
  }
  
  // Import product-specific handlers for product pages
  if (pathname.includes('/products/')) {
    // Enhanced product page functionality if needed
    console.log('🛍️ Product page enhanced features ready');
  }
</script>

<!-- Page Integration and Initialization Script -->
<script is:inline>
  // Global initialization when page loads
  window.addEventListener('load', function() {
    console.log('🛒 Synoptic E-commerce system initialized');
    
    // Check for auth redirects from Flutter app
    const urlParams = new URLSearchParams(window.location.search);
    const authAction = urlParams.get('auth');
    
    if (authAction === 'signin' || authAction === 'signup') {
      // Delay to ensure auth handler is loaded
      setTimeout(() => {
        if (window.authHandler) {
          console.log('🔐 Opening auth modal from URL redirect:', authAction);
          window.authHandler.openModal(authAction);
          
          // Clean up URL without refreshing page
          const cleanUrl = window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);
        } else {
          console.warn('🔐 Auth handler not ready for URL redirect');
        }
      }, 750); // Increased delay for reliability
    }
    
    // Page-specific initialization logging
    const pathname = window.location.pathname;
    
    if (pathname.includes('/products/')) {
      console.log('🛍️ Product page cart integration ready');
    } else if (pathname.includes('/orders')) {
      console.log('📦 Orders page with centralized auth ready');
    } else if (pathname.includes('/account')) {
      console.log('👤 Account page integration ready');
    } else if (pathname.includes('/checkout') || pathname.includes('/cart')) {
      console.log('🛒 Checkout page with auth integration ready');
    }
    
    // Debug helper for development
    if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
      console.log('🔧 Development mode: Auth state debug available via window.authState.debug()');
    }
  });
  
  // Global error handler for auth-related issues
  window.addEventListener('error', function(e) {
    if (e.message && e.message.includes('auth')) {
      console.error('🚨 Auth-related error detected:', e.message);
      // Could add user-friendly error handling here
    }
  });
  
  // Listen for auth state changes globally (for debugging and logging)
  window.addEventListener('authStateChanged', function(e) {
    const { user, isAuthenticated } = e.detail;
    console.log('🔐 Global auth state change detected:', {
      isAuthenticated,
      userEmail: user?.email || 'Not authenticated',
      timestamp: new Date().toLocaleTimeString(),
      page: window.location.pathname
    });
    
    // You can add global auth state reaction logic here if needed
    // For example, updating global UI elements or redirecting
  });
</script>

<!-- Enhanced Product Page Script (only for product pages) -->
<script is:inline>
  // Enhanced product page functionality
  if (window.location.pathname.includes('/products/')) {
    window.addEventListener('load', function() {
      // Ensure cart integration works with auth state
      setTimeout(() => {
        if (window.authState && window.cartHandler) {
          console.log('🛍️ Product page: Auth and cart integration verified');
          
          // Example: Auto-associate cart with user when they sign in
          window.authState.subscribe((user) => {
            if (user && window.cartHandler) {
              console.log('🛍️ Product page: Associating cart with authenticated user');
              // Add any product-specific auth logic here
            }
          });
        }
      }, 500);
    });
  }
</script>

<!-- SSO Integration Script for Flutter App -->
<script is:inline>
  // Handle SSO (Single Sign-On) integration with Flutter app
  window.addEventListener('message', function(event) {
    // Verify origin for security (adjust domain as needed)
    if (event.origin !== 'https://app.synoptic.vision') {
      return;
    }
    
    const { type, data } = event.data;
    
    if (type === 'SSO_AUTH_REQUEST') {
      console.log('🔐 SSO auth request received from Flutter app');
      
      // Wait for auth state to be ready
      if (window.authState) {
        window.authState.getAuthState().then((authState) => {
          event.source.postMessage({
            type: 'SSO_AUTH_RESPONSE',
            data: {
              isAuthenticated: authState.isAuthenticated,
              user: authState.user
            }
          }, event.origin);
        });
      }
    }
  });
</script>

<!-- Performance and Analytics -->
<script is:inline>
  // Performance monitoring for auth initialization
  if (window.performance && window.performance.mark) {
    window.performance.mark('auth-init-start');
    
    window.addEventListener('load', function() {
      // Monitor auth initialization performance
      setTimeout(() => {
        if (window.authState && window.authState.isReady) {
          window.performance.mark('auth-init-end');
          
          try {
            window.performance.measure('auth-init-duration', 'auth-init-start', 'auth-init-end');
            const measure = window.performance.getEntriesByName('auth-init-duration')[0];
            console.log(`🔐 Auth initialization completed in ${Math.round(measure.duration)}ms`);
          } catch (e) {
            // Performance API not fully supported, ignore
          }
        }
      }, 1000);
    });
  }
</script>