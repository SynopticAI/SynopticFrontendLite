---
// src/layouts/PageLayout.astro - Complete Fixed Version with Emergency Patch and Centralized Auth
import Layout from './Layout.astro';
import Header from '~/components/widgets/Header.astro';
import Footer from '~/components/widgets/Footer.astro';
import AuthModal from '~/components/auth/AuthModal.astro';
import CartDrawer from '~/components/cart/CartDrawer.astro';

import { headerData, footerData } from '~/navigation';
import type { MetaData } from '~/types';

export interface Props {
  metadata?: MetaData;
}

const { metadata } = Astro.props;
---

<Layout metadata={metadata}>
  <slot name="header">
    <Header {...headerData} isSticky showToggleTheme />
  </slot>
  
  <main>
    <slot />
  </main>
  
  <slot name="footer">
    <Footer {...footerData} />
  </slot>

  <!-- Firebase Auth Modal -->
  <AuthModal />
  
  <!-- Shopping Cart Drawer -->
  <CartDrawer />
</Layout>

<!-- üö® EMERGENCY SWELL API PATCH - Fixes se.customers undefined error -->
<script is:inline>
(function() {
  console.log('üö® Emergency Swell API patch loading...');
  
  // Wait for Swell to load and apply patch
  function waitForSwellAndPatch() {
    const swell = window.swell || window.se;
    
    if (swell) {
      console.log('üîß Patching Swell customers API...');
      
      // Create customers polyfill that redirects to account API
      if (!swell.customers && swell.account) {
        swell.customers = {
          create: async function(customerData) {
            console.log('üîÑ Redirecting customers.create to account.create');
            try {
              return await swell.account.create(customerData);
            } catch (error) {
              console.error('‚ùå Account creation failed:', error);
              throw error;
            }
          },
          
          update: async function(customerId, customerData) {
            console.log('üîÑ Redirecting customers.update to account.update');
            try {
              return await swell.account.update(customerData);
            } catch (error) {
              console.error('‚ùå Account update failed:', error);
              throw error;
            }
          },
          
          get: async function(customerId) {
            console.log('üîÑ Redirecting customers.get to account.get');
            try {
              return await swell.account.get();
            } catch (error) {
              console.error('‚ùå Account get failed:', error);
              return null;
            }
          }
        };
        
        console.log('‚úÖ Emergency customers API patch applied');
      } else if (swell.customers) {
        console.log('‚ö†Ô∏è Original customers API still present - cache not cleared');
      } else {
        console.log('‚ùå No Swell account API found');
      }
    } else {
      // Swell not loaded yet, try again
      setTimeout(waitForSwellAndPatch, 100);
    }
  }
  
  // Start checking for Swell immediately
  waitForSwellAndPatch();
  
  // Also try after DOM loads and window loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', waitForSwellAndPatch);
  }
  window.addEventListener('load', waitForSwellAndPatch);
})();
</script>

<!-- Firebase, Auth, Cart, and Orders Scripts with Cache Busting -->
<script>
  // üîê CRITICAL: Import centralized auth state manager FIRST
  // This ensures auth state is available before other modules load
  const timestamp = Date.now();
  
  console.log('üîê Loading centralized auth state manager...');
  
  // Sequential loading with cache busting to ensure proper order
  import(`../lib/auth-state-manager.js?v=${timestamp}`)
    .then(() => {
      console.log('‚úÖ Auth state manager loaded');
      
      // Load Swell auth integration
      return import(`../lib/swell-auth-integration.js?v=${timestamp}`);
    })
    .then(() => {
      console.log('‚úÖ Swell auth integration loaded');
      
      // Load main auth handler
      return import(`../scripts/auth-handler.js?v=${timestamp}`);
    })
    .then(() => {
      console.log('‚úÖ Auth handler loaded');
      
      // Load cart handler
      return import(`../scripts/cart-handler.js?v=${timestamp}`);
    })
    .then(() => {
      console.log('‚úÖ Cart handler loaded');
      
      // Conditional imports for performance optimization
      const pathname = window.location.pathname;
      const conditionalImports = [];
      
      // Import orders handler for orders and account pages
      if (pathname.includes('/orders') || pathname.includes('/account')) {
        conditionalImports.push(
          import(`../scripts/orders-handler.js?v=${timestamp}`)
            .then(() => console.log('‚úÖ Orders handler loaded'))
        );
      }
      
      // Import checkout handler for checkout and cart pages
      if (pathname.includes('/checkout') || pathname.includes('/cart')) {
        conditionalImports.push(
          import(`../scripts/checkout-handler.js?v=${timestamp}`)
            .then(() => console.log('‚úÖ Checkout handler loaded'))
        );
      }
      
      return Promise.all(conditionalImports);
    })
    .then(() => {
      console.log('üéâ All modules loaded successfully');
      
      // Dispatch event that everything is ready
      window.dispatchEvent(new CustomEvent('synopticSystemReady', {
        detail: { timestamp: new Date().toISOString() }
      }));
    })
    .catch(error => {
      console.error('‚ùå Module loading failed:', error);
      
      // Fallback: try loading without cache busting
      console.log('üîÑ Attempting fallback loading...');
      Promise.all([
        import('../lib/auth-state-manager.js'),
        import('../scripts/auth-handler.js'),
        import('../scripts/cart-handler.js')
      ]).then(() => {
        console.log('‚úÖ Fallback loading successful');
      }).catch(fallbackError => {
        console.error('‚ùå Fallback loading also failed:', fallbackError);
      });
    });
</script>

<!-- Page Integration and Initialization Script -->
<script is:inline>
  // Cache clearing utilities
  function clearAllCaches() {
    try {
      // Clear localStorage
      if (typeof Storage !== 'undefined' && localStorage) {
        const keys = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && (key.includes('swell') || key.includes('cart') || key.includes('auth'))) {
            keys.push(key);
          }
        }
        keys.forEach(key => localStorage.removeItem(key));
        console.log('üßπ Cleared localStorage cache');
      }
      
      // Clear sessionStorage
      if (typeof Storage !== 'undefined' && sessionStorage) {
        const keys = [];
        for (let i = 0; i < sessionStorage.length; i++) {
          const key = sessionStorage.key(i);
          if (key && (key.includes('swell') || key.includes('cart') || key.includes('auth'))) {
            keys.push(key);
          }
        }
        keys.forEach(key => sessionStorage.removeItem(key));
        console.log('üßπ Cleared sessionStorage cache');
      }
    } catch (e) {
      console.log('üßπ Cache clearing skipped:', e.message);
    }
  }

  // Global initialization when page loads
  window.addEventListener('load', function() {
    console.log('üõí Synoptic E-commerce system initializing...');
    
    // Clear caches if debug mode
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('clearcache') === 'true') {
      clearAllCaches();
      console.log('üßπ Cache clearing requested via URL parameter');
    }
    
    // Check for auth redirects from Flutter app
    const authAction = urlParams.get('auth');
    
    if (authAction === 'signin' || authAction === 'signup') {
      // Delay to ensure auth handler is loaded
      setTimeout(() => {
        if (window.authHandler) {
          console.log('üîê Opening auth modal from URL redirect:', authAction);
          window.authHandler.openModal(authAction);
          
          // Clean up URL without refreshing page
          const cleanUrl = window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);
        } else {
          console.warn('üîê Auth handler not ready for URL redirect');
          // Retry after more time
          setTimeout(() => {
            if (window.authHandler) {
              window.authHandler.openModal(authAction);
            }
          }, 2000);
        }
      }, 1000); // Increased delay for reliability
    }
    
    // Page-specific initialization logging
    const pathname = window.location.pathname;
    
    if (pathname.includes('/products/')) {
      console.log('üõçÔ∏è Product page cart integration ready');
    } else if (pathname.includes('/orders')) {
      console.log('üì¶ Orders page with centralized auth ready');
    } else if (pathname.includes('/account')) {
      console.log('üë§ Account page integration ready');
    } else if (pathname.includes('/checkout') || pathname.includes('/cart')) {
      console.log('üõí Checkout page with auth integration ready');
    }
    
    // Debug helper for development
    if (window.location.hostname === 'localhost' || window.location.hostname.includes('localhost')) {
      console.log('üîß Development mode: Debug commands available:');
      console.log('   window.authState.debug() - Check auth state');
      console.log('   window.cartManager.debug() - Check cart state');
      console.log('   window.swellAuthIntegration.debug() - Check Swell integration');
      
      // Make cache clearing available globally in dev
      window.clearSynopticCaches = clearAllCaches;
    }
    
    console.log('‚úÖ Synoptic E-commerce system initialization complete');
  });
  
  // Global error handler for auth-related issues
  window.addEventListener('error', function(e) {
    if (e.message && (e.message.includes('auth') || e.message.includes('customers') || e.message.includes('swell'))) {
      console.error('üö® System error detected:', e.message);
      
      // Special handling for the customers error
      if (e.message.includes('customers') && e.message.includes('undefined')) {
        console.error('üö® CUSTOMERS API ERROR - Applying emergency patch...');
        
        // Force reapply the patch
        setTimeout(() => {
          const swell = window.swell || window.se;
          if (swell && !swell.customers && swell.account) {
            swell.customers = {
              create: swell.account.create.bind(swell.account),
              update: swell.account.update.bind(swell.account),
              get: swell.account.get.bind(swell.account)
            };
            console.log('üîß Emergency patch reapplied');
          }
        }, 100);
      }
    }
  });
  
  // Listen for auth state changes globally (for debugging and logging)
  window.addEventListener('authStateChanged', function(e) {
    const { user, isAuthenticated } = e.detail;
    console.log('üîê Global auth state change detected:', {
      isAuthenticated,
      userEmail: user?.email || 'Not authenticated',
      timestamp: new Date().toLocaleTimeString(),
      page: window.location.pathname
    });
  });
  
  // Listen for system ready event
  window.addEventListener('synopticSystemReady', function(e) {
    console.log('üéâ Synoptic system fully ready at:', e.detail.timestamp);
    
    // Run final verification
    setTimeout(() => {
      const swell = window.swell || window.se;
      const hasOldAPI = !!(swell?.customers);
      const hasNewAPI = !!(swell?.account);
      
      console.log('üîç Final API verification:', {
        hasOldCustomersAPI: hasOldAPI,
        hasNewAccountAPI: hasNewAPI,
        authReady: !!window.authState,
        cartReady: !!window.cartManager
      });
      
      if (hasOldAPI) {
        console.warn('‚ö†Ô∏è Old customers API still detected - emergency patch should handle this');
      }
    }, 500);
  });
</script>

<!-- Enhanced Product Page Script (only for product pages) -->
<script is:inline>
  // Enhanced product page functionality
  if (window.location.pathname.includes('/products/')) {
    window.addEventListener('load', function() {
      // Ensure cart integration works with auth state
      setTimeout(() => {
        if (window.authState && window.cartManager) {
          console.log('üõçÔ∏è Product page: Auth and cart integration verified');
          
          // Auto-associate cart with user when they sign in
          window.authState.subscribe((user) => {
            if (user && window.cartManager) {
              console.log('üõçÔ∏è Product page: Associating cart with authenticated user');
              // Cart association happens automatically via Swell auth integration
            }
          });
        } else {
          console.warn('üõçÔ∏è Product page: Auth or cart manager not ready');
        }
      }, 750);
    });
  }
</script>

<!-- SSO Integration Script for Flutter App -->
<script is:inline>
  // Handle SSO (Single Sign-On) between Flutter app and web shop
  window.addEventListener('load', function() {
    // Check if this is an SSO redirect from the Flutter app
    const urlParams = new URLSearchParams(window.location.search);
    const ssoToken = urlParams.get('sso_token');
    const ssoAction = urlParams.get('sso_action');
    
    if (ssoToken) {
      console.log('üîó SSO token detected from Flutter app');
      
      // Handle SSO authentication
      setTimeout(() => {
        if (window.swellAuthIntegration) {
          console.log('üîó Processing SSO authentication...');
          // Add SSO token handling logic here if needed
        }
      }, 1000);
    }
    
    // Listen for messages from Flutter app (if in webview)
    window.addEventListener('message', function(event) {
      if (event.data && event.data.type === 'flutter_auth') {
        console.log('üîó Auth message from Flutter app:', event.data);
        
        if (event.data.action === 'signin' && window.authHandler) {
          window.authHandler.openModal('signin');
        } else if (event.data.action === 'signup' && window.authHandler) {
          window.authHandler.openModal('signup');
        }
      }
    });
  });
</script>

<!-- Debug Mode Helpers -->
<script is:inline>
  // Debug mode helpers (only in development)
  if (window.location.hostname === 'localhost' || window.location.search.includes('debug=true')) {
    // Add debug panel
    window.addEventListener('load', function() {
      // Create debug info panel (only if explicitly requested)
      if (window.location.search.includes('showdebug=true')) {
        const debugPanel = document.createElement('div');
        debugPanel.style.cssText = `
          position: fixed; 
          top: 10px; 
          right: 10px; 
          background: rgba(0,0,0,0.8); 
          color: white; 
          padding: 10px; 
          border-radius: 5px; 
          font-family: monospace; 
          font-size: 12px; 
          z-index: 9999;
          max-width: 300px;
        `;
        
        function updateDebugInfo() {
          const swell = window.swell || window.se;
          debugPanel.innerHTML = `
            <strong>Synoptic Debug</strong><br>
            Auth: ${window.authState ? '‚úÖ' : '‚ùå'}<br>
            Cart: ${window.cartManager ? '‚úÖ' : '‚ùå'}<br>
            Swell: ${swell ? '‚úÖ' : '‚ùå'}<br>
            Old API: ${swell?.customers ? '‚ö†Ô∏è' : '‚úÖ'}<br>
            New API: ${swell?.account ? '‚úÖ' : '‚ùå'}<br>
            User: ${window.authState?.isAuthenticated() ? '‚úÖ' : '‚ùå'}
          `;
        }
        
        document.body.appendChild(debugPanel);
        updateDebugInfo();
        setInterval(updateDebugInfo, 2000);
      }
    });
  }
</script>