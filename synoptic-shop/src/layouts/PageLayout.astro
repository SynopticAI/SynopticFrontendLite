---
// src/layouts/PageLayout.astro - Cleaned version with minimal, safe changes
import Layout from './Layout.astro';
import Header from '~/components/widgets/Header.astro';
import Footer from '~/components/widgets/Footer.astro';
import AuthModal from '~/components/auth/AuthModal.astro';
import CartDrawer from '~/components/cart/CartDrawer.astro';

import { headerData, footerData } from '~/navigation';
import type { MetaData } from '~/types';

export interface Props {
  metadata?: MetaData;
}

const { metadata } = Astro.props;
---

<Layout metadata={metadata}>
  <slot name="header">
    <Header {...headerData} isSticky showToggleTheme />
  </slot>
  
  <main>
    <slot />
  </main>
  
  <slot name="footer">
    <Footer {...footerData} />
  </slot>

  <!-- Firebase Auth Modal -->
  <AuthModal />
  
  <!-- Shopping Cart Drawer -->
  <CartDrawer />
</Layout>

<!-- üö® EMERGENCY SWELL API PATCH - Keep this, it's essential -->
<script is:inline>
(function() {
  console.log('üö® Emergency Swell API patch loading...');
  
  function waitForSwellAndPatch() {
    const swell = window.swell || window.se;
    
    if (swell) {
      console.log('üîß Patching Swell customers API...');
      
      if (!swell.customers && swell.account) {
        swell.customers = {
          create: async function(customerData) {
            console.log('üîÑ Redirecting customers.create to account.create');
            try {
              return await swell.account.create(customerData);
            } catch (error) {
              console.error('‚ùå Account creation failed:', error);
              throw error;
            }
          },
          
          update: async function(customerId, customerData) {
            console.log('üîÑ Redirecting customers.update to account.update');
            try {
              return await swell.account.update(customerData);
            } catch (error) {
              console.error('‚ùå Account update failed:', error);
              throw error;
            }
          },
          
          get: async function(customerId) {
            console.log('üîÑ Redirecting customers.get to account.get');
            try {
              return await swell.account.get();
            } catch (error) {
              console.error('‚ùå Account get failed:', error);
              return null;
            }
          }
        };
        
        console.log('‚úÖ Emergency customers API patch applied');
      }
    } else {
      setTimeout(waitForSwellAndPatch, 100);
    }
  }
  
  waitForSwellAndPatch();
})();
</script>

<!-- üîß CLEANED: Simple module loading without debugging -->
<script>
  // Simple module loading - no cache busting or complex debugging
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ Loading Synoptic modules...');
    
    try {
      // Load core modules in order
      await import('../lib/auth-state-manager.js');
      await import('../lib/swell-auth-integration.js');
      await import('../scripts/auth-handler.js');
      await import('../scripts/cart-handler.js');
      
      console.log('‚úÖ Core modules loaded');
      
    } catch (error) {
      console.error('‚ùå Error loading modules:', error);
    }
  });
</script>

<!-- üîß CLEANED: Simple page initialization -->
<script is:inline>
  // Page initialization and auth redirects
  window.addEventListener('load', function() {
    console.log('üõí Synoptic system initializing...');
    
    // Handle auth redirects from Flutter app
    const urlParams = new URLSearchParams(window.location.search);
    const authAction = urlParams.get('auth');
    
    if (authAction === 'signin' || authAction === 'signup') {
      setTimeout(() => {
        if (window.authHandler) {
          console.log('üîê Opening auth modal from URL redirect:', authAction);
          window.authHandler.openModal(authAction);
          
          // Clean up URL
          const cleanUrl = window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);
        }
      }, 1000);
    }
    
    console.log('‚úÖ Synoptic system ready');
  });
</script>

<!-- üîß CLEANED: Simple SSO integration for Flutter app -->
<script is:inline>
  // SSO between main site and Flutter app
  window.addEventListener('load', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const ssoToken = urlParams.get('sso_token');
    
    if (ssoToken) {
      console.log('üîó SSO token detected from Flutter app');
    }
    
    // Listen for messages from Flutter app
    window.addEventListener('message', function(event) {
      if (event.data && event.data.type === 'flutter_auth') {
        console.log('üîó Auth message from Flutter app:', event.data);
        
        if (event.data.action === 'signin' && window.authHandler) {
          window.authHandler.openModal('signin');
        } else if (event.data.action === 'signup' && window.authHandler) {
          window.authHandler.openModal('signup');
        }
      }
    });
  });
</script>