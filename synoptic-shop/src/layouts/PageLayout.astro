---
// src/layouts/PageLayout.astro - Complete Fixed Version with Emergency Patch and Centralized Auth
import Layout from './Layout.astro';
import Header from '~/components/widgets/Header.astro';
import Footer from '~/components/widgets/Footer.astro';
import AuthModal from '~/components/auth/AuthModal.astro';
import CartDrawer from '~/components/cart/CartDrawer.astro';

import { headerData, footerData } from '~/navigation';
import type { MetaData } from '~/types';

export interface Props {
  metadata?: MetaData;
}

const { metadata } = Astro.props;
---

<Layout metadata={metadata}>
  <slot name="header">
    <Header {...headerData} isSticky showToggleTheme />
  </slot>
  
  <main>
    <slot />
  </main>
  
  <slot name="footer">
    <Footer {...footerData} />
  </slot>

  <!-- Firebase Auth Modal -->
  <AuthModal />
  
  <!-- Shopping Cart Drawer -->
  <CartDrawer />
</Layout>

<!-- üö® EMERGENCY SWELL API PATCH - Fixes se.customers undefined error -->
<script is:inline>
(function() {
  console.log('üö® Emergency Swell API patch loading...');
  
  // Wait for Swell to load and apply patch
  function waitForSwellAndPatch() {
    const swell = window.swell || window.se;
    
    if (swell) {
      console.log('üîß Patching Swell customers API...');
      
      // Create customers polyfill that redirects to account API
      if (!swell.customers && swell.account) {
        swell.customers = {
          create: async function(customerData) {
            console.log('üîÑ Redirecting customers.create to account.create');
            try {
              return await swell.account.create(customerData);
            } catch (error) {
              console.error('‚ùå Account creation failed:', error);
              throw error;
            }
          },
          
          update: async function(customerId, customerData) {
            console.log('üîÑ Redirecting customers.update to account.update');
            try {
              return await swell.account.update(customerData);
            } catch (error) {
              console.error('‚ùå Account update failed:', error);
              throw error;
            }
          },
          
          get: async function(customerId) {
            console.log('üîÑ Redirecting customers.get to account.get');
            try {
              return await swell.account.get();
            } catch (error) {
              console.error('‚ùå Account get failed:', error);
              return null;
            }
          }
        };
        
        console.log('‚úÖ Emergency customers API patch applied');
      } else if (swell.customers) {
        console.log('‚ö†Ô∏è Original customers API still present - cache not cleared');
      } else {
        console.log('‚ùå No Swell account API found');
      }
    } else {
      // Swell not loaded yet, try again
      setTimeout(waitForSwellAndPatch, 100);
    }
  }
  
  // Start checking for Swell immediately
  waitForSwellAndPatch();
  
  // Also try after DOM loads and window loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', waitForSwellAndPatch);
  }
  window.addEventListener('load', waitForSwellAndPatch);
})();
</script>

// Enhanced Debugging Script - Add to PageLayout.astro
// This script will help identify exactly what's failing and why

<!-- Enhanced Debug Script - Add this BEFORE your current scripts in PageLayout.astro -->
<script is:inline>
  // üîç DEBUGGING: Enhanced system diagnostics
  window.DEBUG_SYNOPTIC = true;
  window.synopticDebug = {
    moduleLoadTimes: {},
    errors: [],
    windowObjects: {},
    scriptLoadOrder: []
  };

  // Log script loading order
  function logScriptLoad(scriptName) {
    const timestamp = Date.now();
    window.synopticDebug.scriptLoadOrder.push({
      name: scriptName,
      timestamp,
      time: new Date(timestamp).toISOString()
    });
    console.log(`üìä DEBUG: ${scriptName} loaded at ${timestamp}`);
  }

  // Monitor window object changes
  function monitorWindowObjects() {
    const checkInterval = setInterval(() => {
      const currentObjects = {
        authState: !!window.authState,
        authStateManager: !!window.authStateManager,
        cartManager: !!window.cartManager,
        authHandler: !!window.authHandler,
        swellAuthIntegration: !!window.swellAuthIntegration,
        swell: !!window.swell,
        firebase: !!window.__FIREBASE_AUTH__
      };

      // Only log if something changed
      const changed = JSON.stringify(currentObjects) !== JSON.stringify(window.synopticDebug.windowObjects);
      if (changed) {
        window.synopticDebug.windowObjects = currentObjects;
        console.log('üìä DEBUG: Window objects status:', currentObjects);
      }
    }, 500);

    // Stop monitoring after 30 seconds
    setTimeout(() => clearInterval(checkInterval), 30000);
  }

  // Start monitoring immediately
  monitorWindowObjects();

  // Debug function to check current state
  window.debugSynoptic = function() {
    console.log('üîç SYNOPTIC DEBUG REPORT:');
    console.log('================================');
    console.log('1. Module Load Order:', window.synopticDebug.scriptLoadOrder);
    console.log('2. Window Objects:', window.synopticDebug.windowObjects);
    console.log('3. Errors:', window.synopticDebug.errors);
    console.log('4. Current URL:', window.location.href);
    console.log('5. Document Ready State:', document.readyState);
    
    // Firebase check
    console.log('6. Firebase Auth:', {
      config: !!window.__FIREBASE_CONFIG__,
      auth: !!window.__FIREBASE_AUTH__,
      currentUser: window.__FIREBASE_AUTH__?.currentUser?.email || 'Not authenticated'
    });
    
    // Swell check
    if (window.swell) {
      console.log('7. Swell Status:', {
        initialized: !!window.swell,
        hasAccount: !!window.swell.account,
        hasCustomers: !!window.swell.customers,
        hasCart: !!window.swell.cart
      });
    } else {
      console.log('7. Swell: Not loaded');
    }
    
    console.log('================================');
  };

  // Catch and log all errors
  window.addEventListener('error', (e) => {
    const error = {
      message: e.message,
      filename: e.filename,
      line: e.lineno,
      column: e.colno,
      timestamp: Date.now()
    };
    window.synopticDebug.errors.push(error);
    console.error('üìä DEBUG: Error caught:', error);
  });

  // Catch unhandled promise rejections
  window.addEventListener('unhandledrejection', (e) => {
    const error = {
      reason: e.reason,
      promise: e.promise,
      timestamp: Date.now()
    };
    window.synopticDebug.errors.push(error);
    console.error('üìä DEBUG: Unhandled promise rejection:', error);
  });

  // Log when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      logScriptLoad('DOM_READY');
    });
  } else {
    logScriptLoad('DOM_ALREADY_READY');
  }

  // Log when window loads
  window.addEventListener('load', () => {
    logScriptLoad('WINDOW_LOAD');
    
    // Final debug report after 2 seconds
    setTimeout(() => {
      console.log('üîç FINAL DEBUG REPORT:');
      window.debugSynoptic();
    }, 2000);
  });
</script>

<!-- Enhanced Module Loading with Debugging -->
<script>
  // üîê Enhanced module loading with detailed debugging
  const DEBUG = true;
  const timestamp = Date.now();
  
  function debugLog(message, data = {}) {
    if (DEBUG) {
      console.log(`üîç MODULE DEBUG: ${message}`, data);
    }
  }

  async function loadModuleWithDebug(modulePath, name) {
    try {
      debugLog(`Loading ${name}...`, { path: modulePath });
      const startTime = Date.now();
      
      const module = await import(`${modulePath}?v=${timestamp}`);
      
      const loadTime = Date.now() - startTime;
      debugLog(`‚úÖ ${name} loaded successfully`, { loadTime: `${loadTime}ms` });
      
      window.synopticDebug.moduleLoadTimes[name] = loadTime;
      logScriptLoad(name);
      
      return module;
    } catch (error) {
      debugLog(`‚ùå Failed to load ${name}`, { error: error.message, stack: error.stack });
      window.synopticDebug.errors.push({
        module: name,
        error: error.message,
        timestamp: Date.now()
      });
      throw error;
    }
  }

  // Check for module availability after loading
  function verifyModuleLoaded(name, windowProperty) {
    const available = !!window[windowProperty];
    debugLog(`Verification: ${name} -> window.${windowProperty}`, { available });
    return available;
  }

  // Enhanced sequential loading with verification
  async function loadAllModules() {
    try {
      debugLog('üöÄ Starting enhanced module loading sequence...');
      
      // 1. Load auth state manager
      await loadModuleWithDebug('../lib/auth-state-manager.js', 'AUTH_STATE_MANAGER');
      
      // Verify it's available on window
      setTimeout(() => {
        verifyModuleLoaded('auth-state-manager', 'authState');
        verifyModuleLoaded('auth-state-manager', 'authStateManager'); // Check both names
      }, 100);
      
      // 2. Load Swell auth integration
      await loadModuleWithDebug('../lib/swell-auth-integration.js', 'SWELL_AUTH_INTEGRATION');
      
      // 3. Load main auth handler
      await loadModuleWithDebug('../scripts/auth-handler.js', 'AUTH_HANDLER');
      
      // 4. Load cart handler
      await loadModuleWithDebug('../scripts/cart-handler.js', 'CART_HANDLER');
      
      // Verify cart manager is available
      setTimeout(() => {
        verifyModuleLoaded('cart-manager', 'cartManager');
      }, 100);
      
      debugLog('üéâ All core modules loaded successfully');
      
      // 5. Load conditional modules based on page
      const pathname = window.location.pathname;
      const conditionalModules = [];
      
      if (pathname.includes('/orders') || pathname.includes('/account')) {
        conditionalModules.push(
          loadModuleWithDebug('../scripts/orders-handler.js', 'ORDERS_HANDLER')
        );
      }
      
      if (pathname.includes('/checkout') || pathname.includes('/cart')) {
        conditionalModules.push(
          loadModuleWithDebug('../scripts/checkout-handler.js', 'CHECKOUT_HANDLER')
        );
      }
      
      await Promise.all(conditionalModules);
      
      debugLog('üèÅ All modules loaded successfully');
      
      // Dispatch ready event
      window.dispatchEvent(new CustomEvent('synopticSystemReady', {
        detail: { 
          timestamp: new Date().toISOString(),
          loadTimes: window.synopticDebug.moduleLoadTimes
        }
      }));
      
    } catch (error) {
      debugLog('üí• Critical module loading failure', { error: error.message });
      
      // Try fallback loading without cache busting
      debugLog('üîÑ Attempting fallback loading...');
      try {
        await Promise.all([
          import('../lib/auth-state-manager.js'),
          import('../scripts/auth-handler.js'),
          import('../scripts/cart-handler.js')
        ]);
        debugLog('‚úÖ Fallback loading successful');
      } catch (fallbackError) {
        debugLog('üíÄ Fallback loading also failed', { error: fallbackError.message });
      }
    }
  }

  // Start loading when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadAllModules);
  } else {
    loadAllModules();
  }
</script>

<!-- Swell API Debugging Script -->
<script is:inline>
  // üîó SWELL API DEBUGGING
  window.addEventListener('load', function() {
    // Monitor Swell loading
    let swellCheckCount = 0;
    const swellCheckInterval = setInterval(() => {
      swellCheckCount++;
      
      if (window.swell) {
        console.log('üîó DEBUG: Swell loaded successfully', {
          hasAccount: !!window.swell.account,
          hasCustomers: !!window.swell.customers,
          hasCart: !!window.swell.cart,
          checkAttempt: swellCheckCount
        });
        
        // Test Swell account API
        if (window.swell.account) {
          window.swell.account.get()
            .then(account => {
              console.log('üîó DEBUG: Swell account.get() test:', account || 'No account');
            })
            .catch(error => {
              console.log('üîó DEBUG: Swell account.get() error:', error.message);
            });
        }
        
        clearInterval(swellCheckInterval);
      } else if (swellCheckCount > 100) { // 10 seconds
        console.error('üîó DEBUG: Swell failed to load after 10 seconds');
        clearInterval(swellCheckInterval);
      }
    }, 100);
  });
</script>

<!-- Account Page Specific Debugging -->
<script is:inline>
  // üë§ ACCOUNT PAGE DEBUGGING
  if (window.location.pathname.includes('/account')) {
    console.log('üë§ DEBUG: Account page detected, starting enhanced debugging...');
    
    // Monitor auth state manager availability
    let authCheckCount = 0;
    const authCheckInterval = setInterval(() => {
      authCheckCount++;
      
      const authState = window.authState;
      const authStateManager = window.authStateManager;
      
      console.log(`üë§ DEBUG: Auth check #${authCheckCount}`, {
        'window.authState': !!authState,
        'window.authStateManager': !!authStateManager,
        'authState.isReady': authState?.isReady,
        'authState.currentUser': authState?.currentUser?.email || 'None'
      });
      
      if (authState || authStateManager) {
        console.log('üë§ DEBUG: Auth state manager found!', {
          type: authState ? 'window.authState' : 'window.authStateManager',
          isReady: (authState || authStateManager)?.isReady,
          currentUser: (authState || authStateManager)?.currentUser?.email
        });
        clearInterval(authCheckInterval);
      } else if (authCheckCount > 100) { // 10 seconds
        console.error('üë§ DEBUG: Auth state manager not found after 10 seconds');
        clearInterval(authCheckInterval);
      }
    }, 100);
  }
</script>

<script>
// Skip dynamic imports - just fix window objects
window.addEventListener('load', () => {
  // Fix window object names
  if (window.authState && !window.authStateManager) {
    window.authStateManager = window.authState;
    console.log('‚úÖ Fixed authStateManager window reference');
  }
  
  // Check for cart manager
  setTimeout(() => {
    if (!window.cartManager) {
      console.log('‚ùå Cart manager still missing');
    } else {
      console.log('‚úÖ Cart manager found');
    }
  }, 1000);
});
</script>

<!-- Page Integration and Initialization Script -->
<script is:inline>
  // Cache clearing utilities
  function clearAllCaches() {
    try {
      // Clear localStorage
      if (typeof Storage !== 'undefined' && localStorage) {
        const keys = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && (key.includes('swell') || key.includes('cart') || key.includes('auth'))) {
            keys.push(key);
          }
        }
        keys.forEach(key => localStorage.removeItem(key));
        console.log('üßπ Cleared localStorage cache');
      }
      
      // Clear sessionStorage
      if (typeof Storage !== 'undefined' && sessionStorage) {
        const keys = [];
        for (let i = 0; i < sessionStorage.length; i++) {
          const key = sessionStorage.key(i);
          if (key && (key.includes('swell') || key.includes('cart') || key.includes('auth'))) {
            keys.push(key);
          }
        }
        keys.forEach(key => sessionStorage.removeItem(key));
        console.log('üßπ Cleared sessionStorage cache');
      }
    } catch (e) {
      console.log('üßπ Cache clearing skipped:', e.message);
    }
  }

  // Global initialization when page loads
  window.addEventListener('load', function() {
    console.log('üõí Synoptic E-commerce system initializing...');
    
    // Clear caches if debug mode
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('clearcache') === 'true') {
      clearAllCaches();
      console.log('üßπ Cache clearing requested via URL parameter');
    }
    
    // Check for auth redirects from Flutter app
    const authAction = urlParams.get('auth');
    
    if (authAction === 'signin' || authAction === 'signup') {
      // Delay to ensure auth handler is loaded
      setTimeout(() => {
        if (window.authHandler) {
          console.log('üîê Opening auth modal from URL redirect:', authAction);
          window.authHandler.openModal(authAction);
          
          // Clean up URL without refreshing page
          const cleanUrl = window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);
        } else {
          console.warn('üîê Auth handler not ready for URL redirect');
          // Retry after more time
          setTimeout(() => {
            if (window.authHandler) {
              window.authHandler.openModal(authAction);
            }
          }, 2000);
        }
      }, 1000); // Increased delay for reliability
    }
    
    // Page-specific initialization logging
    const pathname = window.location.pathname;
    
    if (pathname.includes('/products/')) {
      console.log('üõçÔ∏è Product page cart integration ready');
    } else if (pathname.includes('/orders')) {
      console.log('üì¶ Orders page with centralized auth ready');
    } else if (pathname.includes('/account')) {
      console.log('üë§ Account page integration ready');
    } else if (pathname.includes('/checkout') || pathname.includes('/cart')) {
      console.log('üõí Checkout page with auth integration ready');
    }
    
    // Debug helper for development
    if (window.location.hostname === 'localhost' || window.location.hostname.includes('localhost')) {
      console.log('üîß Development mode: Debug commands available:');
      console.log('   window.authState.debug() - Check auth state');
      console.log('   window.cartManager.debug() - Check cart state');
      console.log('   window.swellAuthIntegration.debug() - Check Swell integration');
      
      // Make cache clearing available globally in dev
      window.clearSynopticCaches = clearAllCaches;
    }
    
    console.log('‚úÖ Synoptic E-commerce system initialization complete');
  });
  
  // Global error handler for auth-related issues
  window.addEventListener('error', function(e) {
    if (e.message && (e.message.includes('auth') || e.message.includes('customers') || e.message.includes('swell'))) {
      console.error('üö® System error detected:', e.message);
      
      // Special handling for the customers error
      if (e.message.includes('customers') && e.message.includes('undefined')) {
        console.error('üö® CUSTOMERS API ERROR - Applying emergency patch...');
        
        // Force reapply the patch
        setTimeout(() => {
          const swell = window.swell || window.se;
          if (swell && !swell.customers && swell.account) {
            swell.customers = {
              create: swell.account.create.bind(swell.account),
              update: swell.account.update.bind(swell.account),
              get: swell.account.get.bind(swell.account)
            };
            console.log('üîß Emergency patch reapplied');
          }
        }, 100);
      }
    }
  });
  
  // Listen for auth state changes globally (for debugging and logging)
  window.addEventListener('authStateChanged', function(e) {
    const { user, isAuthenticated } = e.detail;
    console.log('üîê Global auth state change detected:', {
      isAuthenticated,
      userEmail: user?.email || 'Not authenticated',
      timestamp: new Date().toLocaleTimeString(),
      page: window.location.pathname
    });
  });
  
  // Listen for system ready event
  window.addEventListener('synopticSystemReady', function(e) {
    console.log('üéâ Synoptic system fully ready at:', e.detail.timestamp);
    
    // Run final verification
    setTimeout(() => {
      const swell = window.swell || window.se;
      const hasOldAPI = !!(swell?.customers);
      const hasNewAPI = !!(swell?.account);
      
      console.log('üîç Final API verification:', {
        hasOldCustomersAPI: hasOldAPI,
        hasNewAccountAPI: hasNewAPI,
        authReady: !!window.authState,
        cartReady: !!window.cartManager
      });
      
      if (hasOldAPI) {
        console.warn('‚ö†Ô∏è Old customers API still detected - emergency patch should handle this');
      }
    }, 500);
  });
</script>

<!-- Enhanced Product Page Script (only for product pages) -->
<script is:inline>
  // Enhanced product page functionality
  if (window.location.pathname.includes('/products/')) {
    window.addEventListener('load', function() {
      // Ensure cart integration works with auth state
      setTimeout(() => {
        if (window.authState && window.cartManager) {
          console.log('üõçÔ∏è Product page: Auth and cart integration verified');
          
          // Auto-associate cart with user when they sign in
          window.authState.subscribe((user) => {
            if (user && window.cartManager) {
              console.log('üõçÔ∏è Product page: Associating cart with authenticated user');
              // Cart association happens automatically via Swell auth integration
            }
          });
        } else {
          console.warn('üõçÔ∏è Product page: Auth or cart manager not ready');
        }
      }, 750);
    });
  }
</script>

<!-- SSO Integration Script for Flutter App -->
<script is:inline>
  // Handle SSO (Single Sign-On) between Flutter app and web shop
  window.addEventListener('load', function() {
    // Check if this is an SSO redirect from the Flutter app
    const urlParams = new URLSearchParams(window.location.search);
    const ssoToken = urlParams.get('sso_token');
    const ssoAction = urlParams.get('sso_action');
    
    if (ssoToken) {
      console.log('üîó SSO token detected from Flutter app');
      
      // Handle SSO authentication
      setTimeout(() => {
        if (window.swellAuthIntegration) {
          console.log('üîó Processing SSO authentication...');
          // Add SSO token handling logic here if needed
        }
      }, 1000);
    }
    
    // Listen for messages from Flutter app (if in webview)
    window.addEventListener('message', function(event) {
      if (event.data && event.data.type === 'flutter_auth') {
        console.log('üîó Auth message from Flutter app:', event.data);
        
        if (event.data.action === 'signin' && window.authHandler) {
          window.authHandler.openModal('signin');
        } else if (event.data.action === 'signup' && window.authHandler) {
          window.authHandler.openModal('signup');
        }
      }
    });
  });
</script>

<!-- Debug Mode Helpers -->
<script is:inline>
  // Debug mode helpers (only in development)
  if (window.location.hostname === 'localhost' || window.location.search.includes('debug=true')) {
    // Add debug panel
    window.addEventListener('load', function() {
      // Create debug info panel (only if explicitly requested)
      if (window.location.search.includes('showdebug=true')) {
        const debugPanel = document.createElement('div');
        debugPanel.style.cssText = `
          position: fixed; 
          top: 10px; 
          right: 10px; 
          background: rgba(0,0,0,0.8); 
          color: white; 
          padding: 10px; 
          border-radius: 5px; 
          font-family: monospace; 
          font-size: 12px; 
          z-index: 9999;
          max-width: 300px;
        `;
        
        function updateDebugInfo() {
          const swell = window.swell || window.se;
          debugPanel.innerHTML = `
            <strong>Synoptic Debug</strong><br>
            Auth: ${window.authState ? '‚úÖ' : '‚ùå'}<br>
            Cart: ${window.cartManager ? '‚úÖ' : '‚ùå'}<br>
            Swell: ${swell ? '‚úÖ' : '‚ùå'}<br>
            Old API: ${swell?.customers ? '‚ö†Ô∏è' : '‚úÖ'}<br>
            New API: ${swell?.account ? '‚úÖ' : '‚ùå'}<br>
            User: ${window.authState?.isAuthenticated() ? '‚úÖ' : '‚ùå'}
          `;
        }
        
        document.body.appendChild(debugPanel);
        updateDebugInfo();
        setInterval(updateDebugInfo, 2000);
      }
    });
  }
</script>