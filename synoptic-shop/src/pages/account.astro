---
// src/pages/account.astro - User Account Dashboard
import PageLayout from '~/layouts/PageLayout.astro';
import AddressList from '~/components/checkout/AddressList.astro';
import PaymentMethodsList from '~/components/checkout/PaymentMethodsList.astro';
import { getCanonical } from '~/utils/permalinks';

const metadata = {
  title: 'My Account - Synoptic',
  description: 'Manage your Synoptic account, update profile information, and view order history.',
  canonical: getCanonical('/account'),
  noindex: true, // Account pages should not be indexed
};
---

<PageLayout metadata={metadata}>
  <!-- Account Page Content -->
  <section class="py-16 md:py-20">
    <div class="mx-auto max-w-7xl px-4 sm:px-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white md:text-4xl">
          My Account
        </h1>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
          Manage your profile, security settings, and preferences
        </p>
      </div>

      <!-- Account Content Grid -->
      <div class="grid gap-8 lg:grid-cols-3">
        <!-- Main Content -->
        <div class="lg:col-span-2">
          <!-- Profile Information Card -->
          <div class="mb-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
            <h2 class="mb-6 text-xl font-semibold text-gray-900 dark:text-white">
              Profile Information
            </h2>
            
            <!-- User Profile Display -->
            <div id="profile-display" class="space-y-4">
              <div class="flex items-center space-x-4">
                <div class="h-16 w-16 rounded-full bg-blue-500 flex items-center justify-center">
                  <span id="user-avatar" class="text-xl font-semibold text-white">U</span>
                </div>
                <div>
                  <h3 id="user-name" class="text-lg font-medium text-gray-900 dark:text-white">
                    Loading...
                  </h3>
                  <p id="user-email" class="text-gray-600 dark:text-gray-300">
                    Loading...
                  </p>
                  <div class="flex items-center mt-2">
                    <span id="email-verified" class="hidden px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                      ✓ Email Verified
                    </span>
                    <span id="email-unverified" class="hidden px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">
                      ⚠ Email Not Verified
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Edit Profile Form (Hidden by default) -->
            <form id="profile-edit-form" class="hidden space-y-6">
              <div>
                <label for="display-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Display Name
                </label>
                <input
                  type="text"
                  id="display-name"
                  class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  placeholder="Enter your display name"
                />
              </div>
              
              <div class="flex space-x-4">
                <button
                  type="button"
                  id="save-profile-btn"
                  class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Save Changes
                </button>
                <button
                  type="button"
                  id="cancel-edit-btn"
                  class="rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
                >
                  Cancel
                </button>
              </div>
            </form>

            <!-- Edit Button (shown when not editing) -->
            <div id="edit-profile-section" class="mt-6">
              <button
                id="edit-profile-btn"
                class="rounded-md bg-gray-100 px-4 py-2 text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              >
                Edit Profile
              </button>
            </div>
          </div>

          <!-- Address Management Card -->
          <div class="mb-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
            <AddressList 
              showAddForm={true} 
              showUseButtons={false} 
              allowDelete={true} 
              title="My Addresses"
              className="account-addresses"
            />
          </div>

          <!-- Payment Methods Card -->
          <div class="mb-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
            <PaymentMethodsList 
              showAddForm={true} 
              showUseButtons={false} 
              allowDelete={true} 
              title="My Payment Methods"
              className="account-payment-methods"
            />
          </div>

          <!-- Security Settings Card -->
          <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
            <h2 class="mb-6 text-xl font-semibold text-gray-900 dark:text-white">
              Security Settings
            </h2>
            
            <!-- Change Password Form -->
            <form id="password-change-form" class="space-y-6">
              <div>
                <label for="current-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Current Password
                </label>
                <input
                  type="password"
                  id="current-password"
                  class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  placeholder="Enter current password"
                />
              </div>
              
              <div>
                <label for="new-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  New Password
                </label>
                <input
                  type="password"
                  id="new-password"
                  class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  placeholder="Enter new password"
                />
              </div>
              
              <div>
                <label for="confirm-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Confirm New Password
                </label>
                <input
                  type="password"
                  id="confirm-password"
                  class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  placeholder="Confirm new password"
                />
              </div>
              
              <button
                type="button"
                id="change-password-btn"
                class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                Change Password
              </button>
            </form>

            <!-- Email Verification Section -->
            <div id="email-verification-section" class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                Email Verification
              </h3>
              <button
                id="resend-verification-btn"
                class="hidden rounded-md bg-yellow-600 px-4 py-2 text-white hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              >
                Resend Verification Email
              </button>
              <p id="verification-status" class="text-sm text-gray-600 dark:text-gray-300">
                Your email is verified
              </p>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1">
          <!-- Quick Actions Card -->
          <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800 mb-6">
            <h3 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">
              Quick Actions
            </h3>
            <div class="space-y-3">
              <a
                href="/orders"
                class="block rounded-md bg-gray-50 p-3 text-center text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              >
                View Order History
              </a>
              <a
                href="/shop"
                class="block rounded-md bg-blue-50 p-3 text-center text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800"
              >
                Continue Shopping
              </a>
              <a
                href="/support"
                class="block rounded-md bg-gray-50 p-3 text-center text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              >
                Contact Support
              </a>
            </div>
          </div>

          <!-- Account Status Card -->
          <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
            <h3 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">
              Account Status
            </h3>
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-sm text-gray-600 dark:text-gray-300">Member Since</span>
                <span id="member-since" class="text-sm font-medium text-gray-900 dark:text-white">
                  Loading...
                </span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-600 dark:text-gray-300">Account Type</span>
                <span class="text-sm font-medium text-gray-900 dark:text-white">Standard</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-600 dark:text-gray-300">Status</span>
                <span class="text-sm font-medium text-green-600">Active</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div class="rounded-lg bg-white p-6 text-center dark:bg-gray-800">
      <div class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-600 border-t-transparent"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-300">Loading your account...</p>
    </div>
  </div>

  <!-- Success/Error Messages -->
  <div id="message-container" class="fixed top-4 right-4 z-50"></div>
</PageLayout>

<!-- Account Page JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('👤 Account page initializing...');
    
    // DOM elements
    const loadingOverlay = document.getElementById('loading-overlay');
    const profileDisplay = document.getElementById('profile-display');
    const profileEditForm = document.getElementById('profile-edit-form');
    const editProfileSection = document.getElementById('edit-profile-section');
    const messageContainer = document.getElementById('message-container');
    
    // User info elements
    const userAvatar = document.getElementById('user-avatar');
    const userName = document.getElementById('user-name');
    const userEmail = document.getElementById('user-email');
    const emailVerified = document.getElementById('email-verified');
    const emailUnverified = document.getElementById('email-unverified');
    const memberSince = document.getElementById('member-since');
    const verificationStatus = document.getElementById('verification-status');
    const resendVerificationBtn = document.getElementById('resend-verification-btn');
    
    // Form elements
    const displayNameInput = document.getElementById('display-name');
    const currentPasswordInput = document.getElementById('current-password');
    const newPasswordInput = document.getElementById('new-password');
    const confirmPasswordInput = document.getElementById('confirm-password');
    
    // Buttons
    const editProfileBtn = document.getElementById('edit-profile-btn');
    const saveProfileBtn = document.getElementById('save-profile-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');
    const changePasswordBtn = document.getElementById('change-password-btn');
    
    let currentUser = null;
    
    // Wait for auth state to be ready
    async function waitForAuth() {
      return new Promise((resolve) => {
        if (window.authStateManager) {
          console.log('👤 Auth state manager available');
          
          // Subscribe to auth changes
          window.authStateManager.subscribe((user) => {
            console.log('👤 Auth state changed:', user ? `✅ ${user.email}` : '❌ Not authenticated');
            currentUser = user;
            
            if (user) {
              updateUserInterface(user);
              loadingOverlay.classList.add('hidden');
            } else {
              // Redirect to home if not authenticated
              showMessage('Please sign in to view your account.', 'error');
              setTimeout(() => {
                window.location.href = '/';
              }, 2000);
            }
            
            resolve(user);
          });
          
          // If already ready, get current state
          if (window.authStateManager.isReady) {
            const user = window.authStateManager.getCurrentUser();
            if (user) {
              currentUser = user;
              updateUserInterface(user);
              loadingOverlay.classList.add('hidden');
              resolve(user);
            }
          }
        } else {
          console.log('👤 Waiting for auth state manager...');
          setTimeout(() => waitForAuth().then(resolve), 100);
        }
      });
    }
    
    // Update UI with user information
    function updateUserInterface(user) {
      if (!user) return;
      
      console.log('👤 Updating user interface for:', user.email);
      
      // Update user info
      const initials = getInitials(user.displayName || user.email);
      userAvatar.textContent = initials;
      userName.textContent = user.displayName || user.email.split('@')[0];
      userEmail.textContent = user.email;
      displayNameInput.value = user.displayName || '';
      
      // Update email verification status
      if (user.emailVerified) {
        emailVerified.classList.remove('hidden');
        emailUnverified.classList.add('hidden');
        verificationStatus.textContent = 'Your email is verified';
        resendVerificationBtn.classList.add('hidden');
      } else {
        emailVerified.classList.add('hidden');
        emailUnverified.classList.remove('hidden');
        verificationStatus.textContent = 'Your email is not verified';
        resendVerificationBtn.classList.remove('hidden');
      }
      
      // Update member since date
      const createdAt = user.metadata?.creationTime;
      if (createdAt) {
        const date = new Date(createdAt);
        memberSince.textContent = date.toLocaleDateString();
      } else {
        memberSince.textContent = 'Recently';
      }
    }
    
    // Get user initials for avatar
    function getInitials(name) {
      if (!name) return 'U';
      return name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2);
    }
    
    // Show message to user
    function showMessage(text, type = 'info') {
      const messageEl = document.createElement('div');
      messageEl.className = `p-4 rounded-md mb-4 ${
        type === 'error' ? 'bg-red-100 text-red-800' : 
        type === 'success' ? 'bg-green-100 text-green-800' : 
        'bg-blue-100 text-blue-800'
      }`;
      messageEl.textContent = text;
      
      messageContainer.appendChild(messageEl);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        messageEl.remove();
      }, 5000);
    }
    
    // Edit profile functionality
    editProfileBtn?.addEventListener('click', () => {
      profileDisplay.classList.add('hidden');
      editProfileSection.classList.add('hidden');
      profileEditForm.classList.remove('hidden');
    });
    
    cancelEditBtn?.addEventListener('click', () => {
      profileDisplay.classList.remove('hidden');
      editProfileSection.classList.remove('hidden');
      profileEditForm.classList.add('hidden');
      
      // Reset form
      if (currentUser) {
        displayNameInput.value = currentUser.displayName || '';
      }
    });
    
    // Save profile changes
    saveProfileBtn?.addEventListener('click', async () => {
      if (!currentUser) return;
      
      try {
        const newDisplayName = displayNameInput.value.trim();
        
        // Import Firebase auth functions
        const { updateProfile } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js');
        
        await updateProfile(currentUser, {
          displayName: newDisplayName
        });
        
        // Update UI
        userName.textContent = newDisplayName || currentUser.email.split('@')[0];
        userAvatar.textContent = getInitials(newDisplayName || currentUser.email);
        
        // Switch back to display mode
        profileDisplay.classList.remove('hidden');
        editProfileSection.classList.remove('hidden');
        profileEditForm.classList.add('hidden');
        
        showMessage('Profile updated successfully!', 'success');
        
      } catch (error) {
        console.error('❌ Error updating profile:', error);
        showMessage('Failed to update profile. Please try again.', 'error');
      }
    });
    
    // Change password functionality
    changePasswordBtn?.addEventListener('click', async () => {
      const currentPassword = currentPasswordInput.value;
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      // Validation
      if (!currentPassword || !newPassword || !confirmPassword) {
        showMessage('Please fill in all password fields.', 'error');
        return;
      }
      
      if (newPassword !== confirmPassword) {
        showMessage('New passwords do not match.', 'error');
        return;
      }
      
      if (newPassword.length < 6) {
        showMessage('New password must be at least 6 characters long.', 'error');
        return;
      }
      
      try {
        // Import Firebase auth functions
        const { updatePassword, reauthenticateWithCredential, EmailAuthProvider } = 
          await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js');
        
        // Re-authenticate user first
        const credential = EmailAuthProvider.credential(currentUser.email, currentPassword);
        await reauthenticateWithCredential(currentUser, credential);
        
        // Update password
        await updatePassword(currentUser, newPassword);
        
        // Clear form
        currentPasswordInput.value = '';
        newPasswordInput.value = '';
        confirmPasswordInput.value = '';
        
        showMessage('Password changed successfully!', 'success');
        
      } catch (error) {
        console.error('❌ Error changing password:', error);
        
        if (error.code === 'auth/wrong-password') {
          showMessage('Current password is incorrect.', 'error');
        } else if (error.code === 'auth/weak-password') {
          showMessage('New password is too weak.', 'error');
        } else {
          showMessage('Failed to change password. Please try again.', 'error');
        }
      }
    });
    
    // Resend verification email
    resendVerificationBtn?.addEventListener('click', async () => {
      if (!currentUser) return;
      
      try {
        const { sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js');
        
        await sendEmailVerification(currentUser);
        showMessage('Verification email sent! Please check your inbox.', 'success');
        
      } catch (error) {
        console.error('❌ Error sending verification email:', error);
        showMessage('Failed to send verification email. Please try again.', 'error');
      }
    });
    
    // Initialize the page
    await waitForAuth();
  });
</script>