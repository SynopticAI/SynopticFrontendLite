---
// src/pages/checkout.astro - Updated streamlined checkout with reusable components
import PageLayout from '~/layouts/PageLayout.astro';
import AddressList from '~/components/checkout/AddressList.astro';
import PaymentMethodsList from '~/components/checkout/PaymentMethodsList.astro';
import CouponCode from '~/components/checkout/CouponCode.astro';
import { getCanonical } from '~/utils/permalinks';

const metadata = {
  title: 'Checkout - Synoptic',
  description: 'Complete your purchase securely',
  canonical: getCanonical('/checkout'),
  noindex: true,
};
---

<PageLayout metadata={metadata}>
  <div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-2xl lg:max-w-none">
      <h1 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-3xl">
        Checkout
      </h1>

      <!-- Loading State -->
      <div id="checkout-loading" class="mt-8 text-center">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
        <p class="mt-2 text-gray-600 dark:text-gray-300">Loading checkout...</p>
      </div>

      <!-- Empty Cart Message -->
      <div id="empty-cart-message" class="mt-8 hidden">
        <div class="text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">Your cart is empty</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Continue shopping to add items to your cart.
          </p>
          <div class="mt-6">
            <a
              href="/shop"
              class="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-700"
            >
              Continue Shopping
            </a>
          </div>
        </div>
      </div>

      <!-- Guest Checkout Options -->
      <div id="guest-checkout-section" class="mt-8 hidden">
        <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
          <h2 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-4">
            Checkout Options
          </h2>
          <div class="space-y-4">
            <button
              id="signin-for-checkout-btn"
              class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              Sign In for Faster Checkout
            </button>
            <button
              id="continue-as-guest-btn"
              class="w-full bg-gray-200 text-gray-800 py-3 px-4 rounded-lg font-medium hover:bg-gray-300 transition-colors"
            >
              Continue as Guest
            </button>
          </div>
        </div>
      </div>

      <!-- Main Checkout Form -->
      <div id="checkout-form-container" class="mt-8 hidden">
        <div class="lg:grid lg:grid-cols-2 lg:gap-x-12 xl:gap-x-16">
          <!-- Left Column - Forms -->
          <div class="space-y-8">
            
            <!-- Contact Information -->
            <div id="contact-section">
              <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Contact Information</h2>
              <div class="mt-4">
                <label for="checkout-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Email Address
                </label>
                <input
                  type="email"
                  id="checkout-email"
                  required
                  class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>

            <!-- Shipping Address -->
            <div id="shipping-section">
              <AddressList 
                showAddForm={true} 
                showUseButtons={true} 
                title="Shipping Address" 
                className="shipping-address-section"
              />
            </div>

            <!-- Shipping Options -->
            <div id="shipping-options-section" class="hidden">
              <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Shipping Method</h2>
              
              <!-- Shipping Loading -->
              <div id="shipping-loading" class="mt-4 text-center py-4 hidden">
                <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
                <p class="text-sm text-gray-600 dark:text-gray-300 mt-2">Calculating shipping...</p>
              </div>
              
              <!-- Shipping Error -->
              <div id="shipping-error" class="mt-4 hidden">
                <p class="text-sm text-red-600 dark:text-red-400">
                  Unable to calculate shipping rates. Using standard rates.
                </p>
              </div>
              
              <!-- Shipping Options -->
              <div id="shipping-options" class="mt-4 space-y-3">
                <!-- Shipping options will be populated here -->
              </div>
            </div>

            <!-- Payment Method -->
            <div id="payment-section" class="hidden">
              <PaymentMethodsList 
                showAddForm={true} 
                showUseButtons={true} 
                title="Payment Method" 
                className="payment-methods-section"
              />
              
              <!-- Billing Address Option -->
              <div class="mt-4">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    id="same-as-shipping"
                    checked
                    class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">
                    Billing address same as shipping address
                  </span>
                </label>
              </div>
            </div>

            <!-- Coupon Code -->
            <div id="coupon-section">
              <CouponCode className="coupon-section" />
            </div>

          </div>

          <!-- Right Column - Order Summary -->
          <div class="mt-10 lg:mt-0">
            <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Order Summary</h2>
            
            <!-- Cart Items -->
            <div id="cart-items-summary" class="mt-4 space-y-3">
              <!-- Cart items will be populated here -->
            </div>

            <!-- Order Totals -->
            <div class="mt-6 border-t border-gray-200 pt-6 dark:border-gray-700">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600 dark:text-gray-300">Subtotal</span>
                <span id="order-subtotal" class="font-medium text-gray-900 dark:text-white">€0.00</span>
              </div>
              
              <div id="shipping-total-row" class="flex justify-between text-sm mt-2 hidden">
                <span class="text-gray-600 dark:text-gray-300">Shipping</span>
                <span id="order-shipping" class="font-medium text-gray-900 dark:text-white">€0.00</span>
              </div>
              
              <div id="discount-total-row" class="flex justify-between text-sm mt-2 hidden">
                <span class="text-gray-600 dark:text-gray-300">Discount</span>
                <span id="order-discount" class="font-medium text-green-600 dark:text-green-400">-€0.00</span>
              </div>
              
              <div id="tax-total-row" class="flex justify-between text-sm mt-2 hidden">
                <span class="text-gray-600 dark:text-gray-300">Tax</span>
                <span id="order-tax" class="font-medium text-gray-900 dark:text-white">€0.00</span>
              </div>
              
              <div class="flex justify-between text-base font-medium mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <span class="text-gray-900 dark:text-white">Total</span>
                <span id="order-total" class="text-gray-900 dark:text-white">€0.00</span>
              </div>
            </div>

            <!-- Place Order Button -->
            <div class="mt-6">
              <button
                type="button"
                id="place-order-btn"
                class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                disabled
              >
                Place Order
              </button>
            </div>

            <!-- Security Notice -->
            <div class="mt-4 text-xs text-gray-500 dark:text-gray-400 text-center">
              <p>🔒 Your payment information is secure and encrypted</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</PageLayout>

<!-- Enhanced Checkout JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('🛒 Enhanced checkout initializing...');
    
    // DOM elements
    const checkoutLoading = document.getElementById('checkout-loading');
    const emptyCartMessage = document.getElementById('empty-cart-message');
    const guestCheckoutSection = document.getElementById('guest-checkout-section');
    const checkoutFormContainer = document.getElementById('checkout-form-container');
    const placeOrderBtn = document.getElementById('place-order-btn');
    
    // State
    let currentUser = null;
    let currentCart = null;
    let selectedShippingMethod = null;
    let selectedPaymentMethod = null;
    let isProcessingOrder = false;
    
    // Initialize checkout
    await initializeCheckout();
    
    async function initializeCheckout() {
      try {
        // Wait for auth state
        await waitForAuth();
        
        // Load cart
        await loadCart();
        
        // Setup event listeners
        setupEventListeners();
        
        // Show appropriate section
        showCheckoutSection();
        
      } catch (error) {
        console.error('❌ Checkout initialization failed:', error);
        showError('Failed to initialize checkout. Please refresh the page.');
      }
    }
    
    function waitForAuth() {
      return new Promise((resolve) => {
        if (window.authStateManager) {
          window.authStateManager.subscribe((user) => {
            console.log('🔐 Auth state changed:', user ? `✅ ${user.email}` : '❌ Not authenticated');
            currentUser = user;
            resolve();
          });
          
          // If already ready, get current state
          if (window.authStateManager.isReady) {
            currentUser = window.authStateManager.getCurrentUser();
            resolve();
          }
        } else {
          setTimeout(() => waitForAuth().then(resolve), 100);
        }
      });
    }
    
    async function loadCart() {
      try {
        if (!window.swell) {
          throw new Error('Swell not available');
        }
        
        const cart = await window.swell.cart.get();
        currentCart = cart;
        
        console.log('🛒 Cart loaded:', {
          items: cart.item_count,
          total: cart.grand_total,
          currency: cart.currency
        });
        
        if (!cart.items || cart.items.length === 0) {
          throw new Error('Cart is empty');
        }
        
        // Update UI
        updateCartSummary();
        
      } catch (error) {
        console.error('❌ Failed to load cart:', error);
        if (error.message === 'Cart is empty') {
          showEmptyCart();
        } else {
          showError('Failed to load cart. Please try again.');
        }
      }
    }
    
    function setupEventListeners() {
      // Guest checkout buttons
      const signinBtn = document.getElementById('signin-for-checkout-btn');
      const guestBtn = document.getElementById('continue-as-guest-btn');
      
      if (signinBtn) {
        signinBtn.addEventListener('click', () => {
          if (window.authHandler) {
            window.authHandler.openModal('signin');
          }
        });
      }
      
      if (guestBtn) {
        guestBtn.addEventListener('click', () => {
          showCheckoutForm();
        });
      }
      
      // Place order button
      if (placeOrderBtn) {
        placeOrderBtn.addEventListener('click', handlePlaceOrder);
      }
      
      // Listen for cart updates from coupon component
      window.addEventListener('cartUpdated', async () => {
        await loadCart();
      });
      
      // Listen for shipping method selection
      document.addEventListener('change', (e) => {
        if (e.target.name === 'shipping_method') {
          selectedShippingMethod = e.target.value;
          updateShippingTotal();
          validateForm();
        }
      });
      
      // Initialize component managers with callbacks
      initializeComponentManagers();
    }
    
    function initializeComponentManagers() {
      // Wait for component managers to be ready
      setTimeout(() => {
        // Configure address list manager
        if (window.addressListManager) {
          window.addressListManager.config.onUseAddress = (address) => {
            populateShippingForm(address);
            calculateShipping();
          };
          
          window.addressListManager.config.onAddressChange = () => {
            calculateShipping();
          };
        }
        
        // Configure payment methods manager
        if (window.paymentMethodsManager) {
          window.paymentMethodsManager.config.onUsePaymentMethod = (paymentMethod) => {
            selectedPaymentMethod = paymentMethod;
            validateForm();
          };
          
          window.paymentMethodsManager.config.onPaymentMethodChange = () => {
            validateForm();
          };
        }
      }, 1000);
    }
    
    function showCheckoutSection() {
      checkoutLoading.classList.add('hidden');
      
      if (currentUser) {
        // User is authenticated - show checkout form directly
        showCheckoutForm();
      } else {
        // Guest checkout options
        guestCheckoutSection.classList.remove('hidden');
      }
    }
    
    function showCheckoutForm() {
      guestCheckoutSection.classList.add('hidden');
      checkoutFormContainer.classList.remove('hidden');
      
      // Populate user data if available
      if (currentUser) {
        populateUserData();
      }
    }
    
    function showEmptyCart() {
      checkoutLoading.classList.add('hidden');
      emptyCartMessage.classList.remove('hidden');
    }
    
    function populateUserData() {
      const emailInput = document.getElementById('checkout-email');
      if (emailInput && currentUser) {
        emailInput.value = currentUser.email;
        emailInput.readOnly = true;
        emailInput.classList.add('bg-gray-50', 'cursor-not-allowed');
      }
    }
    
    function populateShippingForm(address) {
      // This would be called by the AddressList component
      // The address form is handled by the component itself
      console.log('📍 Using address:', address);
    }
    
    function updateCartSummary() {
      if (!currentCart) return;
      
      const container = document.getElementById('cart-items-summary');
      container.innerHTML = '';
      
      // Add cart items
      currentCart.items.forEach(item => {
        const itemDiv = createCartItemElement(item);
        container.appendChild(itemDiv);
      });
      
      // Update totals
      updateOrderTotals();
    }
    
    function createCartItemElement(item) {
      const div = document.createElement('div');
      div.className = 'flex items-center space-x-3 p-3 border border-gray-200 rounded-lg dark:border-gray-700';
      
      const imageUrl = item.product?.images?.[0]?.file?.url || '/placeholder-product.jpg';
      const price = item.price || 0;
      const quantity = item.quantity || 1;
      const total = price * quantity;
      
      div.innerHTML = `
        <img src="${imageUrl}" alt="${item.product?.name || 'Product'}" class="h-12 w-12 object-cover rounded-md">
        <div class="flex-1">
          <h4 class="font-medium text-gray-900 dark:text-white">${item.product?.name || 'Product'}</h4>
          <p class="text-sm text-gray-600 dark:text-gray-300">Qty: ${quantity} × €${price.toFixed(2)}</p>
        </div>
        <div class="text-right">
          <p class="font-medium text-gray-900 dark:text-white">€${total.toFixed(2)}</p>
        </div>
      `;
      
      return div;
    }
    
    function updateOrderTotals() {
      if (!currentCart) return;
      
      const subtotal = currentCart.sub_total || 0;
      const shipping = currentCart.shipping_total || 0;
      const discount = currentCart.discount_total || 0;
      const tax = currentCart.tax_total || 0;
      const total = currentCart.grand_total || 0;
      
      const subtotalEl = document.getElementById('order-subtotal');
      const totalEl = document.getElementById('order-total');
      
      if (subtotalEl) subtotalEl.textContent = `€${subtotal.toFixed(2)}`;
      if (totalEl) totalEl.textContent = `€${total.toFixed(2)}`;
      
      // Show/hide shipping
      const shippingRow = document.getElementById('shipping-total-row');
      const shippingEl = document.getElementById('order-shipping');
      if (shipping > 0 && shippingRow && shippingEl) {
        shippingEl.textContent = `€${shipping.toFixed(2)}`;
        shippingRow.classList.remove('hidden');
      } else if (shippingRow) {
        shippingRow.classList.add('hidden');
      }
      
      // Show/hide discount
      const discountRow = document.getElementById('discount-total-row');
      const discountEl = document.getElementById('order-discount');
      if (discount > 0 && discountRow && discountEl) {
        discountEl.textContent = `-€${discount.toFixed(2)}`;
        discountRow.classList.remove('hidden');
      } else if (discountRow) {
        discountRow.classList.add('hidden');
      }
      
      // Show/hide tax
      const taxRow = document.getElementById('tax-total-row');
      const taxEl = document.getElementById('order-tax');
      if (tax > 0 && taxRow && taxEl) {
        taxEl.textContent = `€${tax.toFixed(2)}`;
        taxRow.classList.remove('hidden');
      } else if (taxRow) {
        taxRow.classList.add('hidden');
      }
    }
    
    async function calculateShipping() {
      try {
        console.log('🚚 Calculating shipping...');
        
        const address = getShippingAddress();
        if (!isValidAddress(address)) {
          console.log('🚚 Invalid address, skipping shipping calculation');
          return;
        }
        
        const shippingSection = document.getElementById('shipping-options-section');
        const shippingLoading = document.getElementById('shipping-loading');
        const shippingError = document.getElementById('shipping-error');
        const shippingOptions = document.getElementById('shipping-options');
        
        if (!shippingSection || !shippingLoading || !shippingError || !shippingOptions) {
          console.log('🚚 Shipping UI elements not found');
          return;
        }
        
        // Show loading
        shippingSection.classList.remove('hidden');
        shippingLoading.classList.remove('hidden');
        shippingOptions.innerHTML = '';
        shippingError.classList.add('hidden');
        
        // Debug shipping calculation
        console.log('🚚 Shipping address:', address);
        
        // Get shipping rates
        const rates = await window.swell.cart.getShippingRates(address);
        console.log('🚚 Shipping rates result:', rates);
        
        shippingLoading.classList.add('hidden');
        
        if (!rates || rates.length === 0) {
          console.warn('🚚 No shipping rates returned - using fallback');
          shippingError.classList.remove('hidden');
          displayFallbackShipping();
        } else {
          displayShippingOptions(rates);
        }
        
        const paymentSection = document.getElementById('payment-section');
        if (paymentSection) {
          paymentSection.classList.remove('hidden');
        }
        
      } catch (error) {
        console.error('❌ Shipping calculation failed:', error);
        const shippingLoading = document.getElementById('shipping-loading');
        const shippingError = document.getElementById('shipping-error');
        
        if (shippingLoading) shippingLoading.classList.add('hidden');
        if (shippingError) shippingError.classList.remove('hidden');
        
        displayFallbackShipping();
      }
    }
    
    function displayFallbackShipping() {
      const shippingOptions = document.getElementById('shipping-options');
      if (!shippingOptions) return;
      
      const fallbackRates = [
        { id: 'standard', name: 'Standard Shipping', description: '5-7 business days', price: 4.99 },
        { id: 'express', name: 'Express Shipping', description: '2-3 business days', price: 9.99 }
      ];
      
      shippingOptions.innerHTML = '';
      
      fallbackRates.forEach((rate, index) => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'border border-gray-200 rounded-lg p-3 dark:border-gray-700';
        
        optionDiv.innerHTML = `
          <label class="flex items-center justify-between cursor-pointer">
            <div class="flex items-center">
              <input type="radio" name="shipping_method" value="${rate.id}" ${index === 0 ? 'checked' : ''} class="mr-3">
              <div>
                <div class="font-medium text-gray-900 dark:text-white">${rate.name}</div>
                <div class="text-sm text-gray-600 dark:text-gray-300">${rate.description}</div>
              </div>
            </div>
            <span class="font-medium text-gray-900 dark:text-white">€${rate.price.toFixed(2)}</span>
          </label>
        `;
        
        shippingOptions.appendChild(optionDiv);
      });
      
      // Auto-select first option
      selectedShippingMethod = fallbackRates[0].id;
      updateShippingTotal();
    }
    
    function displayShippingOptions(rates) {
      const shippingOptions = document.getElementById('shipping-options');
      if (!shippingOptions) return;
      
      shippingOptions.innerHTML = '';
      
      rates.forEach((rate, index) => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'border border-gray-200 rounded-lg p-3 dark:border-gray-700';
        
        optionDiv.innerHTML = `
          <label class="flex items-center justify-between cursor-pointer">
            <div class="flex items-center">
              <input type="radio" name="shipping_method" value="${rate.id}" ${index === 0 ? 'checked' : ''} class="mr-3">
              <div>
                <div class="font-medium text-gray-900 dark:text-white">${rate.name}</div>
                <div class="text-sm text-gray-600 dark:text-gray-300">${rate.description || ''}</div>
              </div>
            </div>
            <span class="font-medium text-gray-900 dark:text-white">€${rate.price.toFixed(2)}</span>
          </label>
        `;
        
        shippingOptions.appendChild(optionDiv);
      });
      
      // Auto-select first option
      if (rates.length > 0) {
        selectedShippingMethod = rates[0].id;
        updateShippingTotal();
      }
    }
    
    function getShippingAddress() {
      // This would be retrieved from the AddressList component
      // For now, we'll get it from the form fields if they exist
      return {
        first_name: document.getElementById('address-first-name')?.value || '',
        last_name: document.getElementById('address-last-name')?.value || '',
        address1: document.getElementById('address-address1')?.value || '',
        address2: document.getElementById('address-address2')?.value || '',
        city: document.getElementById('address-city')?.value || '',
        zip: document.getElementById('address-zip')?.value || '',
        country: document.getElementById('address-country')?.value || 'DE',
        state: document.getElementById('address-state')?.value || ''
      };
    }
    
    function isValidAddress(address) {
      return address.address1 && address.city && address.zip && address.country;
    }
    
    function updateShippingTotal() {
      // Update the shipping total in the cart
      // This would be handled by the shipping calculation
      validateForm();
    }
    
    function validateForm() {
      const address = getShippingAddress();
      const hasValidAddress = isValidAddress(address);
      const hasShipping = selectedShippingMethod || false;
      const hasPayment = selectedPaymentMethod || false;
      
      const isValid = hasValidAddress && hasShipping && hasPayment;
      
      if (placeOrderBtn) {
        placeOrderBtn.disabled = !isValid;
        
        if (isValid) {
          placeOrderBtn.classList.remove('bg-gray-400');
          placeOrderBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
        } else {
          placeOrderBtn.classList.add('bg-gray-400');
          placeOrderBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
        }
      }
    }
    
    async function handlePlaceOrder() {
      if (isProcessingOrder) return;
      
      try {
        isProcessingOrder = true;
        if (placeOrderBtn) {
          placeOrderBtn.textContent = 'Processing...';
          placeOrderBtn.disabled = true;
        }
        
        console.log('🛒 Processing order...');
        
        // Collect order data
        const orderData = {
          email: document.getElementById('checkout-email')?.value,
          shipping: getShippingAddress(),
          billing: document.getElementById('same-as-shipping')?.checked ? 
            getShippingAddress() : getBillingAddress(),
          payment_method: selectedPaymentMethod,
          shipping_method: selectedShippingMethod
        };
        
        console.log('🛒 Order data:', orderData);
        
        // Submit order
        const result = await window.swell.cart.submitOrder(orderData);
        
        if (result) {
          console.log('✅ Order submitted successfully:', result);
          
          // Redirect to confirmation page
          window.location.href = `/order-confirmation?order=${result.number}`;
        } else {
          throw new Error('Order submission failed');
        }
        
      } catch (error) {
        console.error('❌ Order placement failed:', error);
        showError('Failed to place order. Please try again.');
        
        isProcessingOrder = false;
        if (placeOrderBtn) {
          placeOrderBtn.textContent = 'Place Order';
          placeOrderBtn.disabled = false;
        }
      }
    }
    
    function getBillingAddress() {
      // Return billing address if different from shipping
      return getShippingAddress(); // Placeholder
    }
    
    function showError(message) {
      // You can implement a toast notification system here
      console.error(message);
      alert(message); // Temporary
    }
    
    // Start shipping calculation when address is populated
    // This would be triggered by the AddressList component
    
    // Initialize form validation
    setTimeout(() => {
      validateForm();
    }, 1000);
    
    console.log('🛒 Enhanced checkout ready');
  });
</script>

<!-- Development tools notice -->
<script>
  // Development tools
  if (typeof window !== 'undefined' && (window.location.hostname === 'localhost' || window.location.hostname.includes('localhost'))) {
    console.log('🔧 Development mode detected');
    console.log('💡 To use shipping debug tools, add this to your HTML:');
    console.log('<script src="/src/scripts/shipping-debug.js"><\/script>');
  }
</script>