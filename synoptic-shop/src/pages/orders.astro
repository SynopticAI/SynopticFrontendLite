---
// src/pages/orders.astro - FIXED Orders Page with Proper Swell Auth Integration
import PageLayout from '~/layouts/PageLayout.astro';
import { getCanonical, getHomePermalink } from '~/utils/permalinks';

const metadata = {
  title: 'My Orders - Synoptic',
  description: 'View your order history and track shipments.',
  canonical: getCanonical('/orders'),
  noindex: true, // Orders should not be indexed
};
---

<PageLayout metadata={metadata}>
  <!-- Orders Page Content -->
  <section class="py-16 md:py-20">
    <div class="mx-auto max-w-7xl px-4 sm:px-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white md:text-4xl">
          My Orders
        </h1>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
          Track your order history and shipment status
        </p>
      </div>

      <!-- Authentication Required Section -->
      <div id="auth-required" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Sign In Required
          </h3>
          <p class="text-gray-600 dark:text-gray-300 mb-6">
            Please sign in to view your order history.
          </p>
          <button
            id="sign-in-button"
            class="rounded-md bg-blue-600 px-6 py-3 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Sign In
          </button>
        </div>
      </div>

      <!-- Loading Section -->
      <div id="orders-loading" class="hidden text-center py-12">
        <div class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-600 border-t-transparent"></div>
        <p class="mt-4 text-gray-600 dark:text-gray-300">Loading your orders...</p>
      </div>

      <!-- Error Section -->
      <div id="orders-error" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Unable to Load Orders
          </h3>
          <p id="error-message" class="text-gray-600 dark:text-gray-300 mb-6">
            Something went wrong while loading your orders.
          </p>
          <button
            id="retry-button"
            class="rounded-md bg-blue-600 px-6 py-3 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Try Again
          </button>
        </div>
      </div>

      <!-- Empty State Section -->
      <div id="orders-empty" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            No Orders Yet
          </h3>
          <p class="text-gray-600 dark:text-gray-300 mb-6">
            You haven't placed any orders yet. Start shopping to see your orders here.
          </p>
          <a
            href="/shop"
            class="rounded-md bg-blue-600 px-6 py-3 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Start Shopping
          </a>
        </div>
      </div>

      <!-- Orders Content -->
      <div id="orders-container" class="hidden">
        <!-- Search and Filter Section -->
        <div class="mb-8 flex flex-col sm:flex-row gap-4">
          <div class="flex-1">
            <input
              type="text"
              id="order-search"
              placeholder="Search orders by number, item name..."
              class="w-full rounded-md border border-gray-300 px-4 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            />
          </div>
          <div class="sm:w-48">
            <select
              id="status-filter"
              class="w-full rounded-md border border-gray-300 px-4 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            >
              <option value="">All Orders</option>
              <option value="pending">Pending</option>
              <option value="draft">Draft</option>
              <option value="payment_pending">Payment Pending</option>
              <option value="delivery_pending">Delivery Pending</option>
              <option value="hold">On Hold</option>
              <option value="complete">Complete</option>
              <option value="canceled">Canceled</option>
            </select>
          </div>
        </div>

        <!-- Orders List -->
        <div id="orders-list" class="space-y-6">
          <!-- Orders will be inserted here -->
        </div>

        <!-- Pagination (if needed) -->
        <div id="pagination" class="hidden mt-8 flex items-center justify-center">
          <button
            id="prev-page"
            class="rounded-l-md border border-gray-300 px-3 py-2 text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
          >
            Previous
          </button>
          <span id="page-info" class="border-t border-b border-gray-300 px-4 py-2 text-sm text-gray-700 dark:border-gray-600 dark:text-gray-300">
            Page 1 of 1
          </span>
          <button
            id="next-page"
            class="rounded-r-md border border-gray-300 px-3 py-2 text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Order Details Modal -->
  <div id="order-modal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4">
      <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity" id="modal-backdrop"></div>
      
      <div class="relative w-full max-w-4xl rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
        <!-- Modal Header -->
        <div class="mb-6 flex items-center justify-between">
          <h2 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white">
            Order Details
          </h2>
          <button
            id="close-modal"
            class="rounded-md p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700"
          >
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

        <!-- Modal Content -->
        <div id="modal-content">
          <!-- Order details will be loaded here -->
        </div>
      </div>
    </div>
  </div>

  <!-- Message Container -->
  <div id="message-container" class="fixed top-4 right-4 z-50"></div>
</PageLayout>

<!-- Orders Page JavaScript with FIXED Swell Auth Integration -->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('📦 Orders page initializing...');
    
    // DOM elements
    const authRequired = document.getElementById('auth-required');
    const ordersLoading = document.getElementById('orders-loading');
    const ordersError = document.getElementById('orders-error');
    const ordersEmpty = document.getElementById('orders-empty');
    const ordersList = document.getElementById('orders-list');
    const ordersContainer = document.getElementById('orders-container');
    const messageContainer = document.getElementById('message-container');
    const orderSearch = document.getElementById('order-search');
    const statusFilter = document.getElementById('status-filter');
    const signInButton = document.getElementById('sign-in-button');
    const retryButton = document.getElementById('retry-button');
    const errorMessage = document.getElementById('error-message');
    
    let currentUser = null;
    let orders = [];
    let currentPage = 1;
    let totalPages = 1;
    let searchTimeout = null;
    
    // Show specific section
    function showSection(sectionId) {
      // Hide all sections
      [authRequired, ordersLoading, ordersError, ordersEmpty, ordersContainer].forEach(el => {
        if (el) el.classList.add('hidden');
      });
      
      // Show target section
      const targetSection = document.getElementById(sectionId);
      if (targetSection) {
        targetSection.classList.remove('hidden');
      }
    }
    
    // Show error with message
    function showError(message) {
      if (errorMessage) {
        errorMessage.textContent = message;
      }
      showSection('orders-error');
    }
    
    // Show message to user
    function showMessage(text, type = 'info') {
      const messageEl = document.createElement('div');
      messageEl.className = `p-4 rounded-md mb-4 ${
        type === 'error' ? 'bg-red-100 text-red-800' : 
        type === 'success' ? 'bg-green-100 text-green-800' : 
        'bg-blue-100 text-blue-800'
      }`;
      messageEl.textContent = text;
      
      messageContainer.appendChild(messageEl);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        messageEl.remove();
      }, 5000);
    }
    
    // Wait for auth state to be ready
    async function waitForAuth() {
      return new Promise((resolve) => {
        if (window.authStateManager) {
          console.log('📦 Auth state manager available');
          
          // Subscribe to auth changes
          window.authStateManager.subscribe((user) => {
            console.log('📦 Orders: Auth state changed:', user ? `✅ ${user.email}` : '❌ Not authenticated');
            currentUser = user;
            
            if (user) {
              // Wait for Swell auth integration before loading orders
              waitForSwellAuthentication().then(() => {
                loadOrders();
              });
            } else {
              showSection('auth-required');
            }
            
            resolve(user);
          });
          
          // If already ready, get current state
          if (window.authStateManager.isReady) {
            const user = window.authStateManager.getCurrentUser();
            currentUser = user;
            
            if (user) {
              // Wait for Swell auth integration before loading orders
              waitForSwellAuthentication().then(() => {
                loadOrders();
              });
            } else {
              showSection('auth-required');
            }
            resolve(user);
          }
        } else {
          console.log('📦 Waiting for auth state manager...');
          setTimeout(() => waitForAuth().then(resolve), 100);
        }
      });
    }
    
    // FIXED: Wait for Swell authentication to complete
    async function waitForSwellAuthentication() {
      console.log('📦 Waiting for Swell authentication to complete...');
      
      // Wait for Swell to be available
      await waitForSwell();
      
      // Wait for Swell auth integration to complete
      return new Promise((resolve) => {
        let attempts = 0;
        const maxAttempts = 50; // 5 seconds max wait
        
        const checkSwellAuth = async () => {
          attempts++;
          
          try {
            const account = await window.swell.account.get();
            if (account && account.email) {
              console.log('✅ Swell authentication verified for:', account.email);
              resolve(account);
              return;
            }
          } catch (error) {
            console.log(`📦 Swell auth check ${attempts}/${maxAttempts}:`, error.message);
          }
          
          if (attempts >= maxAttempts) {
            console.warn('⚠️ Swell authentication timeout, proceeding anyway...');
            resolve(null);
            return;
          }
          
          // Wait and try again
          setTimeout(checkSwellAuth, 100);
        };
        
        // Start checking
        checkSwellAuth();
      });
    }
    
    // Wait for Swell to be available
    async function waitForSwell() {
      return new Promise((resolve) => {
        if (window.swell) {
          resolve(window.swell);
        } else {
          const checkSwell = () => {
            if (window.swell) {
              resolve(window.swell);
            } else {
              setTimeout(checkSwell, 100);
            }
          };
          checkSwell();
        }
      });
    }
    
    // FIXED: Load orders with better error handling and retry logic
    async function loadOrders(page = 1, search = '', status = '') {
      try {
        showSection('orders-loading');
        console.log('📦 Loading orders...', { page, search, status });
        
        // Ensure we have a Firebase user
        if (!currentUser) {
          throw new Error('No authenticated user found');
        }
        
        // Wait for Swell to be available
        await waitForSwell();
        
        const swell = window.swell;
        if (!swell) {
          throw new Error('Swell not available');
        }
        
        // CRITICAL FIX: Wait for Swell authentication with retries
        let account = null;
        let authAttempts = 0;
        const maxAuthAttempts = 3;
        
        while (!account && authAttempts < maxAuthAttempts) {
          authAttempts++;
          console.log(`📦 Swell auth attempt ${authAttempts}/${maxAuthAttempts}...`);
          
          try {
            // Check current Swell auth state
            account = await swell.account.get();
            
            if (!account) {
              console.log('📦 No Swell account found, triggering re-authentication...');
              
              // Trigger Swell auth integration manually
              if (window.swellAuthIntegration) {
                await window.swellAuthIntegration.authenticateWithSwell(currentUser);
                
                // Wait a bit for auth to complete
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Try to get account again
                account = await swell.account.get();
              }
            }
            
            if (account) {
              console.log('✅ Swell account verified:', account.email);
              break;
            }
            
          } catch (authError) {
            console.warn(`📦 Swell auth attempt ${authAttempts} failed:`, authError);
            
            if (authAttempts < maxAuthAttempts) {
              // Wait before retrying
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
          }
        }
        
        if (!account) {
          throw new Error('Unable to authenticate with Swell after multiple attempts. Please try refreshing the page.');
        }
        
        // Build query options
        const queryOptions = {
          page: page,
          limit: 10,
          sort: 'date_created desc',
          expand: ['items.product', 'items.variant']
        };
        
        // Add filters
        if (status) {
          queryOptions.where = { status };
        }
        
        if (search) {
          queryOptions.search = search;
        }
        
        console.log('📦 Fetching orders with options:', queryOptions);
        
        // Fetch orders with timeout
        const orderPromise = swell.account.listOrders(queryOptions);
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Request timeout')), 10000)
        );
        
        const result = await Promise.race([orderPromise, timeoutPromise]);
        console.log('📦 Orders result:', result);
        
        if (result && result.results) {
          orders = result.results;
          currentPage = result.page || 1;
          totalPages = result.pages || 1;
          
          if (orders.length === 0) {
            showSection('orders-empty');
          } else {
            displayOrders();
            showSection('orders-container');
          }
        } else {
          console.warn('📦 No orders result or unexpected format:', result);
          showSection('orders-empty');
        }
        
      } catch (error) {
        console.error('📦 Error loading orders:', error);
        showError(`Failed to load orders: ${error.message}`);
      }
    }
    
    // Display orders in the UI
    function displayOrders() {
      if (!ordersList || !orders.length) return;
      
      ordersList.innerHTML = '';
      
      orders.forEach(order => {
        const orderCard = createOrderCard(order);
        ordersList.appendChild(orderCard);
      });
    }
    
    // Create order card element
    function createOrderCard(order) {
      const orderDiv = document.createElement('div');
      orderDiv.className = 'rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800';
      
      const orderNumber = order.number || order.id.slice(-8).toUpperCase();
      const orderDate = new Date(order.date_created).toLocaleDateString();
      const orderTotal = formatPrice(order.grand_total || 0);
      const itemCount = order.items ? order.items.length : 0;
      
      const statusInfo = getOrderStatusInfo(order.status);
      
      orderDiv.innerHTML = `
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <div class="mb-4 sm:mb-0">
            <div class="flex items-center space-x-4">
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                  Order #${orderNumber}
                </h3>
                <p class="text-sm text-gray-600 dark:text-gray-300">
                  ${orderDate} • ${itemCount} item${itemCount !== 1 ? 's' : ''}
                </p>
              </div>
              <span class="px-3 py-1 text-xs font-medium rounded-full ${statusInfo.bgColor} ${statusInfo.textColor}">
                ${statusInfo.label}
              </span>
            </div>
          </div>
          
          <div class="flex items-center space-x-4">
            <div class="text-right">
              <p class="text-lg font-medium text-gray-900 dark:text-white">
                ${orderTotal}
              </p>
            </div>
            <button
              class="view-order-btn rounded-md bg-blue-600 px-4 py-2 text-sm text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              data-order-id="${order.id}"
            >
              View Details
            </button>
          </div>
        </div>
        
        ${order.items && order.items.length > 0 ? `
          <div class="mt-4 border-t border-gray-200 pt-4 dark:border-gray-700">
            <div class="flex items-center space-x-4 overflow-x-auto">
              ${order.items.slice(0, 3).map(item => `
                <div class="flex-shrink-0 flex items-center space-x-3">
                  ${item.product && item.product.images && item.product.images.length > 0 ? `
                    <img
                      src="${item.product.images[0].file.url}"
                      alt="${item.product.name || 'Product'}"
                      class="h-12 w-12 rounded-md object-cover"
                    />
                  ` : `
                    <div class="h-12 w-12 rounded-md bg-gray-200 dark:bg-gray-600"></div>
                  `}
                  <div>
                    <p class="text-sm font-medium text-gray-900 dark:text-white">
                      ${item.product ? item.product.name : 'Product'}
                    </p>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      Qty: ${item.quantity}
                    </p>
                  </div>
                </div>
              `).join('')}
              ${order.items.length > 3 ? `
                <div class="flex-shrink-0 text-sm text-gray-600 dark:text-gray-300">
                  +${order.items.length - 3} more item${order.items.length - 3 !== 1 ? 's' : ''}
                </div>
              ` : ''}
            </div>
          </div>
        ` : ''}
      `;
      
      return orderDiv;
    }
    
    // Get order status information
    function getOrderStatusInfo(status) {
      const statusMap = {
        'draft': { label: 'Draft', bgColor: 'bg-gray-100', textColor: 'text-gray-800' },
        'pending': { label: 'Pending', bgColor: 'bg-yellow-100', textColor: 'text-yellow-800' },
        'payment_pending': { label: 'Payment Pending', bgColor: 'bg-orange-100', textColor: 'text-orange-800' },
        'delivery_pending': { label: 'Delivery Pending', bgColor: 'bg-blue-100', textColor: 'text-blue-800' },
        'hold': { label: 'On Hold', bgColor: 'bg-red-100', textColor: 'text-red-800' },
        'complete': { label: 'Complete', bgColor: 'bg-green-100', textColor: 'text-green-800' },
        'canceled': { label: 'Canceled', bgColor: 'bg-gray-100', textColor: 'text-gray-800' }
      };
      
      return statusMap[status] || { label: status || 'Unknown', bgColor: 'bg-gray-100', textColor: 'text-gray-800' };
    }
    
    // Format price
    function formatPrice(amount) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(amount);
    }
    
    // Event listeners
    signInButton?.addEventListener('click', () => {
      if (window.authHandler) {
        window.authHandler.openModal('signin');
      }
    });
    
    retryButton?.addEventListener('click', () => {
      if (currentUser) {
        loadOrders();
      } else {
        waitForAuth();
      }
    });
    
    // Search functionality
    orderSearch?.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        loadOrders(1, e.target.value, statusFilter?.value || '');
      }, 500);
    });
    
    // Status filter
    statusFilter?.addEventListener('change', (e) => {
      loadOrders(1, orderSearch?.value || '', e.target.value);
    });
    
    // View order details
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('view-order-btn')) {
        const orderId = e.target.getAttribute('data-order-id');
        if (orderId) {
          viewOrderDetails(orderId);
        }
      }
    });
    
    // View order details (basic implementation)
    function viewOrderDetails(orderId) {
      const order = orders.find(o => o.id === orderId);
      if (order) {
        // For now, just show an alert with order details
        // You can implement a proper modal later
        alert(`Order #${order.number || order.id.slice(-8).toUpperCase()}\n` +
              `Date: ${new Date(order.date_created).toLocaleDateString()}\n` +
              `Status: ${order.status}\n` +
              `Total: ${formatPrice(order.grand_total || 0)}\n` +
              `Items: ${order.items ? order.items.length : 0}`);
      }
    }
    
    // Initialize the page
    await waitForAuth();
  });
</script>