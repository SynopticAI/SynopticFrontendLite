---
// src/pages/orders.astro - COMPLETE FIX: Order Details Modal + Status + Currency + Cart Counter
import PageLayout from '~/layouts/PageLayout.astro';
import { getCanonical, getHomePermalink } from '~/utils/permalinks';

const metadata = {
  title: 'My Orders - Synoptic',
  description: 'View your order history and track shipments.',
  canonical: getCanonical('/orders'),
  noindex: true,
};
---

<PageLayout metadata={metadata}>
  <!-- Orders Page Content -->
  <section class="py-16 md:py-20">
    <div class="mx-auto max-w-7xl px-4 sm:px-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white md:text-4xl">
          My Orders
        </h1>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
          Track your order history and shipment status
        </p>
      </div>

      <!-- Authentication Required Section -->
      <div id="auth-required" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Sign In Required
          </h3>
          <p class="text-gray-600 dark:text-gray-300 mb-6">
            Please sign in to view your order history.
          </p>
          <button
            id="open-auth-btn"
            class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Sign In
          </button>
        </div>
      </div>

      <!-- Swell Account Setup Required -->
      <div id="account-setup-required" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-yellow-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 13.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Account Setup Required
          </h3>
          <p class="text-gray-600 dark:text-gray-300 mb-6">
            We need to set up your shopping account. This will only take a moment.
          </p>
          <button
            id="setup-account-btn"
            class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Set Up Account
          </button>
        </div>
      </div>

      <!-- Loading Section -->
      <div id="orders-loading" class="text-center py-12">
        <div class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-600 border-t-transparent"></div>
        <p class="mt-4 text-gray-600 dark:text-gray-300">Loading your orders...</p>
      </div>

      <!-- Orders Container -->
      <div id="orders-container" class="hidden">
        <!-- Filters and Search -->
        <div class="mb-6 flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
          <!-- Search -->
          <div class="relative">
            <input
              type="text"
              id="search-input"
              placeholder="Search orders..."
              class="w-full rounded-md border border-gray-300 bg-white px-4 py-2 pl-10 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 lg:w-80"
            />
            <div class="absolute inset-y-0 left-0 flex items-center pl-3">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
              </svg>
            </div>
          </div>

          <!-- Status Filter -->
          <div class="flex gap-2">
            <button id="filter-all" class="filter-btn active rounded-md bg-blue-600 px-4 py-2 text-white">
              All Orders
            </button>
            <button id="filter-pending" class="filter-btn rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700">
              Pending
            </button>
            <button id="filter-complete" class="filter-btn rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700">
              Completed
            </button>
          </div>
        </div>

        <!-- Orders List -->
        <div id="orders-list" class="space-y-6">
          <!-- Orders will be dynamically loaded here -->
        </div>

        <!-- Pagination -->
        <div id="pagination-container" class="hidden mt-8 flex items-center justify-between">
          <button
            id="prev-page"
            class="rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50 disabled:opacity-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
            disabled
          >
            Previous
          </button>
          <span id="page-info" class="text-gray-600 dark:text-gray-300">
            Page 1 of 1
          </span>
          <button
            id="next-page"
            class="rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50 disabled:opacity-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
            disabled
          >
            Next
          </button>
        </div>
      </div>

      <!-- Empty Orders Section -->
      <div id="orders-empty" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            No Orders Yet
          </h3>
          <p class="text-gray-600 dark:text-gray-300 mb-6">
            You haven't placed any orders yet. Start shopping to see your order history here.
          </p>
          <a
            href="/shop"
            class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Start Shopping
          </a>
        </div>
      </div>

      <!-- Error Section -->
      <div id="orders-error" class="hidden text-center py-12">
        <div class="mx-auto max-w-md">
          <div class="h-16 w-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
            <svg class="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Unable to Load Orders
          </h3>
          <p id="error-message" class="text-gray-600 dark:text-gray-300 mb-6">
            We're having trouble loading your orders. Please try again.
          </p>
          <button
            id="retry-btn"
            class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Try Again
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Order Details Modal -->
  <div id="order-modal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4">
      <div class="fixed inset-0 bg-black bg-opacity-50" id="modal-backdrop"></div>
      <div class="relative w-full max-w-4xl rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
        <!-- Modal Header -->
        <div class="mb-6 flex items-center justify-between">
          <h2 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white">
            Order Details
          </h2>
          <button
            id="close-modal"
            class="rounded-md p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700"
          >
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

        <!-- Modal Content -->
        <div id="modal-content">
          <!-- Order details will be loaded here -->
        </div>
      </div>
    </div>
  </div>

  <!-- Message Container -->
  <div id="message-container" class="fixed top-4 right-4 z-50"></div>
</PageLayout>

<!-- Orders Page JavaScript with COMPLETE FIXES -->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('📦 Orders page initializing...');
    
    // DOM elements
    const sections = {
      authRequired: document.getElementById('auth-required'),
      accountSetupRequired: document.getElementById('account-setup-required'),
      loading: document.getElementById('orders-loading'),
      container: document.getElementById('orders-container'),
      empty: document.getElementById('orders-empty'),
      error: document.getElementById('orders-error')
    };
    
    const ordersList = document.getElementById('orders-list');
    const searchInput = document.getElementById('search-input');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const messageContainer = document.getElementById('message-container');
    const orderModal = document.getElementById('order-modal');
    const modalContent = document.getElementById('modal-content');
    const closeModalBtn = document.getElementById('close-modal');
    const modalBackdrop = document.getElementById('modal-backdrop');
    
    let currentUser = null;
    let orders = [];
    let currentFilter = '';
    let searchTimeout = null;
    
    // Show specific section
    function showSection(sectionName) {
      Object.values(sections).forEach(section => section?.classList.add('hidden'));
      sections[sectionName]?.classList.remove('hidden');
    }
    
    // Show message to user
    function showMessage(text, type = 'info') {
      const messageEl = document.createElement('div');
      messageEl.className = `p-4 rounded-md mb-4 ${
        type === 'error' ? 'bg-red-100 text-red-800' : 
        type === 'success' ? 'bg-green-100 text-green-800' : 
        'bg-blue-100 text-blue-800'
      }`;
      messageEl.textContent = text;
      
      messageContainer.appendChild(messageEl);
      
      setTimeout(() => messageEl.remove(), 5000);
    }
    
    // FIXED: Format price with EUR currency and German locale
    function formatPrice(amount, currency = 'EUR') {
      if (typeof amount !== 'number') return 'N/A';
      
      try {
        return new Intl.NumberFormat('de-DE', {
          style: 'currency',
          currency: currency
        }).format(amount);
      } catch (error) {
        return `${currency} ${amount.toFixed(2)}`;
      }
    }
    
    // FIXED: Get order status info with proper text formatting
    function getOrderStatusInfo(status) {
      // Convert underscores to spaces and capitalize each word
      const formatStatusLabel = (str) => {
        return str.split('_')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
      };
      
      const statusMap = {
        'draft': { label: 'Draft', bgColor: 'bg-gray-100', textColor: 'text-gray-800' },
        'pending': { label: 'Pending', bgColor: 'bg-yellow-100', textColor: 'text-yellow-800' },
        'payment_pending': { label: 'Payment Pending', bgColor: 'bg-orange-100', textColor: 'text-orange-800' },
        'delivery_pending': { label: 'Delivery Pending', bgColor: 'bg-blue-100', textColor: 'text-blue-800' },
        'hold': { label: 'On Hold', bgColor: 'bg-red-100', textColor: 'text-red-800' },
        'complete': { label: 'Complete', bgColor: 'bg-green-100', textColor: 'text-green-800' },
        'delivered': { label: 'Delivered', bgColor: 'bg-green-100', textColor: 'text-green-800' },
        'shipped': { label: 'Shipped', bgColor: 'bg-blue-100', textColor: 'text-blue-800' },
        'canceled': { label: 'Canceled', bgColor: 'bg-gray-100', textColor: 'text-gray-800' },
        'cancelled': { label: 'Cancelled', bgColor: 'bg-gray-100', textColor: 'text-gray-800' },
        'refunded': { label: 'Refunded', bgColor: 'bg-purple-100', textColor: 'text-purple-800' }
      };
      
      return statusMap[status] || { 
        label: formatStatusLabel(status || 'unknown'), 
        bgColor: 'bg-gray-100', 
        textColor: 'text-gray-800' 
      };
    }
    
    // Format order date in German locale
    function formatOrderDate(date) {
      if (!date) return 'N/A';
      
      const orderDate = new Date(date);
      return orderDate.toLocaleDateString('de-DE', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }
    
    // Format order time in German locale  
    function formatOrderTime(date) {
      if (!date) return 'N/A';
      
      const orderDate = new Date(date);
      return orderDate.toLocaleTimeString('de-DE', {
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    // Wait for auth state to be ready
    async function waitForAuth() {
      return new Promise((resolve) => {
        if (window.authStateManager) {
          console.log('📦 Auth state manager available');
          
          window.authStateManager.subscribe((user) => {
            console.log('📦 Orders: Auth state changed:', user ? `✅ ${user.email}` : '❌ Not authenticated');
            currentUser = user;
            
            if (user) {
              checkSwellAccount();
            } else {
              showSection('authRequired');
            }
            
            resolve(user);
          });
          
          if (window.authStateManager.isReady) {
            const user = window.authStateManager.getCurrentUser();
            currentUser = user;
            resolve(user);
          }
        } else {
          console.log('📦 Waiting for auth state manager...');
          setTimeout(() => waitForAuth().then(resolve), 100);
        }
      });
    }
    
    // Check if Swell account exists and is properly authenticated
    async function checkSwellAccount() {
      if (!currentUser) {
        showSection('authRequired');
        return;
      }
      
      console.log('📦 Checking Swell account for:', currentUser.email);
      showSection('loading');
      
      try {
        await waitForSwell();
        console.log('📦 Waiting for Swell authentication to complete...');
        await waitForSwellAuth();
        
        const account = await window.swell.account.get();
        
        if (account && account.email) {
          console.log('✅ Swell account found:', account.email);
          loadOrders();
        } else {
          console.log('❌ No Swell account found, attempting to create one...');
          await createSwellAccount();
        }
        
      } catch (error) {
        console.error('📦 Error checking Swell account:', error);
        
        if (error.message.includes('authentication') || error.message.includes('unauthorized')) {
          showSection('accountSetupRequired');
        } else {
          showSection('error');
          document.getElementById('error-message').textContent = `Error: ${error.message}`;
        }
      }
    }
    
    // Wait for Swell to be available
    async function waitForSwell() {
      return new Promise((resolve) => {
        if (window.swell) {
          resolve(window.swell);
        } else {
          const checkSwell = () => {
            if (window.swell) {
              resolve(window.swell);
            } else {
              setTimeout(checkSwell, 100);
            }
          };
          checkSwell();
        }
      });
    }
    
    // Wait for Swell authentication to complete
    async function waitForSwellAuth() {
      return new Promise((resolve) => {
        let attempts = 0;
        const maxAttempts = 50;
        
        const checkSwellAuth = async () => {
          attempts++;
          
          try {
            const account = await window.swell.account.get();
            if (account && account.email) {
              console.log('✅ Swell authentication verified for:', account.email);
              resolve(account);
              return;
            }
          } catch (error) {
            console.log(`📦 Swell auth check ${attempts}/${maxAttempts}:`, error.message);
          }
          
          if (attempts >= maxAttempts) {
            console.warn('⚠️ Swell authentication timeout');
            resolve(null);
            return;
          }
          
          setTimeout(checkSwellAuth, 100);
        };
        
        checkSwellAuth();
      });
    }
    
    // Create Swell account for current Firebase user
    async function createSwellAccount() {
      try {
        console.log('📦 Creating Swell account for:', currentUser.email);
        
        const accountData = {
          email: currentUser.email,
          password: currentUser.uid,
          first_name: currentUser.displayName?.split(' ')[0] || '',
          last_name: currentUser.displayName?.split(' ').slice(1).join(' ') || ''
        };
        
        const newAccount = await window.swell.account.create(accountData);
        
        if (newAccount && newAccount.email) {
          console.log('✅ Swell account created successfully:', newAccount.email);
          loadOrders();
        } else {
          throw new Error('Failed to create Swell account');
        }
        
      } catch (error) {
        console.error('📦 Error creating Swell account:', error);
        
        if (error.message.includes('exists') || error.message.includes('duplicate')) {
          console.log('📦 Account exists, attempting login...');
          await loginToSwellAccount();
        } else {
          showSection('accountSetupRequired');
        }
      }
    }
    
    // Login to existing Swell account
    async function loginToSwellAccount() {
      try {
        console.log('📦 Logging into Swell account for:', currentUser.email);
        
        await window.swell.account.login(currentUser.email, currentUser.uid);
        
        const account = await window.swell.account.get();
        if (account && account.email) {
          console.log('✅ Swell login successful:', account.email);
          loadOrders();
        } else {
          throw new Error('Login succeeded but account not found');
        }
        
      } catch (error) {
        console.error('📦 Error logging into Swell account:', error);
        showSection('accountSetupRequired');
      }
    }
    
    // Load orders from Swell
    async function loadOrders(page = 1, search = '', status = '') {
      try {
        showSection('loading');
        console.log('📦 Loading orders...', { page, search, status });
        
        const queryOptions = {
          page: page,
          limit: 10,
          sort: 'date_created desc',
          expand: ['items.product', 'items.variant']
        };
        
        if (status) {
          queryOptions.where = { status };
        }
        
        if (search) {
          queryOptions.search = search;
        }
        
        console.log('📦 Fetching orders with options:', queryOptions);
        
        const result = await window.swell.account.listOrders(queryOptions);
        console.log('📦 Orders result:', result);
        
        if (result && result.results) {
          orders = result.results;
          
          if (orders.length === 0) {
            showSection('empty');
          } else {
            displayOrders();
            showSection('container');
          }
        } else {
          console.warn('📦 No orders result or unexpected format:', result);
          showSection('empty');
        }
        
      } catch (error) {
        console.error('📦 Error loading orders:', error);
        showSection('error');
        document.getElementById('error-message').textContent = `Failed to load orders: ${error.message}`;
      }
    }
    
    // Display orders in the UI
    function displayOrders() {
      if (!ordersList || !orders.length) return;
      
      ordersList.innerHTML = '';
      
      orders.forEach(order => {
        const orderCard = createOrderCard(order);
        ordersList.appendChild(orderCard);
      });
    }
    
    // Create order card element
    function createOrderCard(order) {
      const orderDiv = document.createElement('div');
      orderDiv.className = 'rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800 cursor-pointer hover:shadow-md transition-shadow';
      
      const orderNumber = order.number || order.id.slice(-8).toUpperCase();
      const orderDate = formatOrderDate(order.date_created);
      const orderTotal = formatPrice(order.grand_total || 0, order.currency || 'EUR');
      const itemCount = order.items ? order.items.length : 0;
      const statusInfo = getOrderStatusInfo(order.status);
      
      orderDiv.innerHTML = `
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">
              Order #${orderNumber}
            </h3>
            <p class="text-sm text-gray-600 dark:text-gray-300">
              ${orderDate} • ${itemCount} item${itemCount !== 1 ? 's' : ''}
            </p>
          </div>
          <div class="text-right">
            <p class="text-lg font-medium text-gray-900 dark:text-white">
              ${orderTotal}
            </p>
            <span class="px-2 py-1 text-xs font-medium rounded-full ${statusInfo.bgColor} ${statusInfo.textColor}">
              ${statusInfo.label}
            </span>
          </div>
        </div>
      `;
      
      // Add click handler to view order details
      orderDiv.addEventListener('click', () => viewOrderDetails(order));
      
      return orderDiv;
    }
    
    // FIXED: View order details in modal with complete implementation
    async function viewOrderDetails(order) {
      console.log('📦 Viewing order details:', order);
      
      // Show modal
      orderModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Show loading state
      modalContent.innerHTML = `
        <div class="text-center py-8">
          <div class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-600 border-t-transparent"></div>
          <p class="mt-4 text-gray-600 dark:text-gray-300">Loading order details...</p>
        </div>
      `;
      
      try {
        // Fetch complete order details if needed
        let completeOrder = order;
        if (!order.items || order.items.length === 0) {
          completeOrder = await window.swell.account.getOrder(order.id, {
            expand: ['items.product', 'items.variant', 'shipments', 'billing', 'shipping']
          });
        }
        
        // Render order details
        renderOrderDetails(completeOrder);
        
      } catch (error) {
        console.error('📦 Error loading order details:', error);
        modalContent.innerHTML = `
          <div class="text-center py-8">
            <div class="h-16 w-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
              <svg class="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <p class="text-gray-600 dark:text-gray-300">Failed to load order details</p>
          </div>
        `;
      }
    }
    
    // Render complete order details in modal
    function renderOrderDetails(order) {
      const orderNumber = order.number || order.id.slice(-8).toUpperCase();
      const orderDate = formatOrderDate(order.date_created);
      const orderTime = formatOrderTime(order.date_created);
      const statusInfo = getOrderStatusInfo(order.status);
      
      modalContent.innerHTML = `
        <!-- Order Header -->
        <div class="border-b border-gray-200 dark:border-gray-700 pb-6 mb-6">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between">
            <div>
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                Order #${orderNumber}
              </h3>
              <p class="text-sm text-gray-600 dark:text-gray-300 mt-1">
                Placed on ${orderDate} at ${orderTime}
              </p>
            </div>
            <div class="mt-4 md:mt-0">
              <span class="px-3 py-1 text-sm font-medium rounded-full ${statusInfo.bgColor} ${statusInfo.textColor}">
                ${statusInfo.label}
              </span>
            </div>
          </div>
        </div>

        <!-- Order Items -->
        <div class="mb-6">
          <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
            Order Items
          </h4>
          <div class="space-y-4">
            ${order.items ? order.items.map(item => `
              <div class="flex items-center space-x-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div class="flex-shrink-0">
                  <div class="w-16 h-16 bg-gray-200 dark:bg-gray-600 rounded-lg flex items-center justify-center">
                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
                    </svg>
                  </div>
                </div>
                <div class="flex-1">
                  <h5 class="font-medium text-gray-900 dark:text-white">
                    ${item.product?.name || 'Product'}
                  </h5>
                  <p class="text-sm text-gray-600 dark:text-gray-300">
                    Quantity: ${item.quantity} × ${formatPrice(item.price || 0, order.currency || 'EUR')}
                  </p>
                </div>
                <div class="text-right">
                  <p class="font-medium text-gray-900 dark:text-white">
                    ${formatPrice((item.price || 0) * (item.quantity || 1), order.currency || 'EUR')}
                  </p>
                </div>
              </div>
            `).join('') : '<p class="text-gray-500">No items found</p>'}
          </div>
        </div>

        <!-- Order Summary -->
        <div class="border-t border-gray-200 dark:border-gray-700 pt-6 mb-6">
          <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
            Order Summary
          </h4>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-300">Subtotal</span>
              <span class="text-gray-900 dark:text-white">${formatPrice(order.sub_total || 0, order.currency || 'EUR')}</span>
            </div>
            ${order.shipping_total ? `
              <div class="flex justify-between">
                <span class="text-gray-600 dark:text-gray-300">Shipping</span>
                <span class="text-gray-900 dark:text-white">${formatPrice(order.shipping_total, order.currency || 'EUR')}</span>
              </div>
            ` : ''}
            ${order.tax_total ? `
              <div class="flex justify-between">
                <span class="text-gray-600 dark:text-gray-300">Tax</span>
                <span class="text-gray-900 dark:text-white">${formatPrice(order.tax_total, order.currency || 'EUR')}</span>
              </div>
            ` : ''}
            <div class="flex justify-between font-semibold text-lg border-t border-gray-200 dark:border-gray-700 pt-2">
              <span class="text-gray-900 dark:text-white">Total</span>
              <span class="text-gray-900 dark:text-white">${formatPrice(order.grand_total || 0, order.currency || 'EUR')}</span>
            </div>
          </div>
        </div>

        <!-- Shipping Information -->
        ${order.shipping ? `
          <div class="border-t border-gray-200 dark:border-gray-700 pt-6">
            <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
              Shipping Information
            </h4>
            <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
              <p class="text-sm text-gray-900 dark:text-white">
                ${order.shipping.name || ''}<br>
                ${order.shipping.address1 || ''}<br>
                ${order.shipping.address2 ? order.shipping.address2 + '<br>' : ''}
                ${order.shipping.zip || ''} ${order.shipping.city || ''}<br>
                ${order.shipping.state ? order.shipping.state + ', ' : ''}${order.shipping.country || ''}
              </p>
            </div>
          </div>
        ` : ''}
      `;
    }
    
    // Close modal functionality
    function closeModal() {
      orderModal.classList.add('hidden');
      document.body.style.overflow = '';
    }
    
    // Modal event listeners
    closeModalBtn?.addEventListener('click', closeModal);
    modalBackdrop?.addEventListener('click', closeModal);
    
    // ESC key to close modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !orderModal.classList.contains('hidden')) {
        closeModal();
      }
    });
    
    // Event listeners
    document.getElementById('open-auth-btn')?.addEventListener('click', () => {
      if (window.authHandler) {
        window.authHandler.openModal('signin');
      }
    });
    
    document.getElementById('setup-account-btn')?.addEventListener('click', async () => {
      await createSwellAccount();
    });
    
    document.getElementById('retry-btn')?.addEventListener('click', () => {
      checkSwellAccount();
    });
    
    // Search functionality
    searchInput?.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        loadOrders(1, e.target.value, currentFilter);
      }, 500);
    });
    
    // Filter functionality
    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        filterButtons.forEach(b => {
          b.classList.remove('active', 'bg-blue-600', 'text-white');
          b.classList.add('border', 'border-gray-300', 'text-gray-700', 'hover:bg-gray-50');
        });
        
        btn.classList.add('active', 'bg-blue-600', 'text-white');
        btn.classList.remove('border', 'border-gray-300', 'text-gray-700', 'hover:bg-gray-50');
        
        const filter = btn.id.replace('filter-', '');
        currentFilter = filter === 'all' ? '' : filter;
        loadOrders(1, searchInput?.value || '', currentFilter);
      });
    });
    
    // Initialize the page
    await waitForAuth();
    
    // FIXED: Ensure cart counter works by triggering cart update
    setTimeout(() => {
      if (window.cartManager && typeof window.cartManager.refreshCart === 'function') {
        console.log('🛒 Triggering cart refresh to update counter');
        window.cartManager.refreshCart();
      }
    }, 1000);
  });
</script>