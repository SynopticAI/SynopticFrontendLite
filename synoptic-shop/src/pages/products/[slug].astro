---
// src/pages/products/[slug].astro - Complete fixed version with working add to cart
import Layout from '~/layouts/PageLayout.astro';
import ProductError from '~/components/ProductError.astro';
import { 
  getProductBySlug, 
  getProductPricing,
  getProductImageUrls, 
  getProductDescription,
  isProductInStock,
  getProductOptions
} from '~/lib/swell.js';

export async function getStaticPaths() {
  const productSlugs = ['starter-kit', 'synopticam', 'inference-credits'];
  
  return productSlugs.map(slug => ({
    params: { slug }
  }));
}

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// Fetch product data from Swell with error handling
let product = null;
let hasError = false;

try {
  product = await getProductBySlug(slug);
  console.log('Product fetched for', slug, ':', product?.id || 'not found');
} catch (error) {
  console.error(`Error fetching product ${slug}:`, error);
  hasError = true;
}

// Prepare display variables
const showError = !product || hasError;
const errorType = hasError ? 'error' : 'not-found';

// Only process product data if we have a valid product
let productImages = ['/placeholder-product.jpg'];
let pricing = { formattedPrice: 'Price unavailable', hasOptions: false };
let stockAvailable = false;
let title = `Product ${slug}`;
let description = 'Product information unavailable';
let htmlDescription = '';
let productOptions = [];
let productSchema = {};

if (product && !hasError) {
  productImages = getProductImageUrls(product);
  pricing = getProductPricing(product);
  stockAvailable = isProductInStock(product);
  title = product.name || `Product ${slug}`;
  description = getProductDescription(product);
  htmlDescription = description;
  productOptions = getProductOptions(product);
  
  // Product schema for SEO
  productSchema = {
    "@context": "https://schema.org/",
    "@type": "Product",
    "name": product.name,
    "description": description.replace(/<[^>]*>/g, ''), // Strip HTML for schema
    "sku": product.sku || slug,
    "brand": {
      "@type": "Brand",
      "name": "Synoptic"
    },
    "offers": {
      "@type": "Offer",
      "url": `https://synoptic.vision/products/${slug}`,
      "priceCurrency": pricing.currency,
      "price": pricing.price || pricing.priceRange?.min,
      "availability": stockAvailable ? "https://schema.org/InStock" : "https://schema.org/OutOfStock"
    }
  };

  if (productImages[0] !== '/placeholder-product.jpg') {
    productSchema.image = productImages;
  }
}

const pageTitle = showError ? 'Product Not Found | Synoptic' : `${title} | Synoptic`;
const pageDescription = showError ? 'The requested product could not be found.' : description.replace(/<[^>]*>/g, '').substring(0, 160);

const metadata = {
  title: pageTitle,
  description: pageDescription,
  canonical: `https://synoptic.vision/products/${slug}`,
  openGraph: {
    type: 'product',
    title: pageTitle,
    description: pageDescription,
    images: productImages[0] !== '/placeholder-product.jpg' ? [{ url: productImages[0] }] : undefined,
  }
};
---

<Layout metadata={metadata}>
  {showError ? (
    <ProductError type={errorType} slug={slug} />
  ) : (
    <!-- Product Page Content -->
    <div class="bg-white">
      <div class="max-w-2xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:max-w-7xl lg:px-8">
        
        <!-- Back to Products -->
        <nav class="mb-8">
          <a 
            href="/products" 
            class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Products
          </a>
        </nav>

        <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
          
          <!-- Image Gallery -->
          <div class="flex flex-col-reverse">
            <!-- Image Gallery Grid -->
            <div class="mx-auto mt-6 w-full max-w-2xl sm:block lg:max-w-none">
              <div class="grid grid-cols-4 gap-6" aria-orientation="horizontal" role="tablist">
                {productImages.map((image, index) => (
                  <button
                    key={index}
                    class="relative h-24 bg-white rounded-md flex items-center justify-center text-sm font-medium uppercase text-gray-900 cursor-pointer hover:bg-gray-50 focus:outline-none focus:ring focus:ring-offset-4 focus:ring-opacity-50"
                    aria-controls={`tabs-${index}-panel`}
                    role="tab"
                    type="button"
                  >
                    <span class="sr-only">Product image {index + 1}</span>
                    <span class="absolute inset-0 rounded-md overflow-hidden">
                      <img 
                        src={image} 
                        alt={`${title} - Image ${index + 1}`}
                        class="w-full h-full object-center object-cover"
                        loading="lazy"
                      />
                    </span>
                  </button>
                ))}
              </div>
            </div>

            <!-- Main Product Image -->
            <div class="w-full aspect-w-1 aspect-h-1">
              <div id="main-image-container" class="relative">
                <img 
                  id="main-product-image"
                  src={productImages[0]} 
                  alt={title}
                  class="w-full h-full object-center object-cover sm:rounded-lg cursor-zoom-in"
                  loading="eager"
                />
                <button 
                  id="zoom-trigger"
                  class="absolute inset-0 w-full h-full bg-transparent cursor-zoom-in"
                  aria-label="Zoom image"
                >
                  <span class="sr-only">Click to zoom</span>
                </button>
              </div>
            </div>
          </div>

          <!-- Product Info -->
          <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
            <h1 class="text-3xl font-bold tracking-tight text-gray-900">{title}</h1>

            <div class="mt-3">
              <h2 class="sr-only">Product information</h2>
              <p class="text-3xl tracking-tight text-gray-900">{pricing.formattedPrice}</p>
            </div>

            <!-- Stock Status -->
            <div class="mt-6">
              {stockAvailable ? (
                <div class="flex items-center">
                  <svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                  </svg>
                  <span class="text-green-600 font-medium">In Stock</span>
                </div>
              ) : (
                <div class="flex items-center">
                  <svg class="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                  </svg>
                  <span class="text-red-600 font-medium">Out of Stock</span>
                </div>
              )}
            </div>

            <!-- Product Description -->
            <div class="mt-6">
              <h3 class="sr-only">Description</h3>
              <div class="text-base text-gray-700 space-y-6" set:html={htmlDescription} />
            </div>

            <!-- Add to Cart Section -->
            {stockAvailable && (
              <div class="border-t border-gray-200 pt-6 mt-6">
                <form id={`product-form-${product.id}`} class="space-y-6">
                  
                  <!-- Quantity Selector -->
                  <div>
                    <label for="quantity" class="block text-sm font-medium text-gray-900 mb-2">
                      Quantity
                    </label>
                    <div class="flex items-center space-x-3">
                      <button 
                        type="button" 
                        id="decrease-quantity" 
                        class="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 text-gray-600 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary quantity-btn"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                        </svg>
                      </button>
                      
                      <input 
                        type="number" 
                        id="quantity" 
                        name="quantity"
                        min="1" 
                        max="10" 
                        value="1"
                        class="w-16 text-center border border-gray-300 rounded-lg py-2 focus:border-primary focus:ring-primary"
                      />
                      
                      <button 
                        type="button" 
                        id="increase-quantity"
                        class="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 text-gray-600 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary quantity-btn"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                    </div>
                  </div>

                  <!-- Product Options (if any) -->
                  {productOptions && productOptions.length > 0 && (
                    <div class="space-y-4">
                      {productOptions.map(option => (
                        <div key={option.id}>
                          <label for={`option-${option.id}`} class="block text-sm font-medium text-gray-900 mb-2">
                            {option.name}
                          </label>
                          <select 
                            id={`option-${option.id}`}
                            name={`option-${option.id}`}
                            data-option={option.name}
                            class="w-full border border-gray-300 rounded-lg py-2 px-3 focus:border-primary focus:ring-primary"
                          >
                            {option.values && option.values.map(value => (
                              <option key={value.id} value={value.name}>
                                {value.name}
                              </option>
                            ))}
                          </select>
                        </div>
                      ))}
                    </div>
                  )}

                  <!-- FIXED: Add to Cart Button with Data Attributes -->
                  <button 
                    type="button"
                    disabled={!stockAvailable}
                    class={`w-full py-4 px-8 rounded-lg text-white font-medium text-lg transition-all duration-200 flex items-center justify-center ${
                      stockAvailable 
                        ? 'bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 active:transform active:scale-95' 
                        : 'bg-gray-300 cursor-not-allowed'
                    }`}
                    id="add-to-cart-btn"
                    data-product-id={product.id}
                    data-quantity="1"
                  >
                    {stockAvailable ? (
                      <span class="flex items-center justify-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 6H2m5 7v1m0 0v5a2 2 0 002 2h6a2 2 0 002-2v-5m-8 0h8"></path>
                        </svg>
                        Add to Cart
                      </span>
                    ) : (
                      'Out of Stock'
                    )}
                  </button>
                </form>
              </div>
            )}

            <!-- Product Details -->
            <div class="border-t border-gray-200 pt-6 mt-6">
              <h3 class="text-lg font-medium text-gray-900 mb-3">Product Details</h3>
              <dl class="space-y-2">
                {product.sku && (
                  <div class="flex">
                    <dt class="text-sm font-medium text-gray-500 w-1/3">SKU:</dt>
                    <dd class="text-sm text-gray-900">{product.sku}</dd>
                  </div>
                )}
                <div class="flex">
                  <dt class="text-sm font-medium text-gray-500 w-1/3">Availability:</dt>
                  <dd class="text-sm text-gray-900">
                    {stockAvailable ? 'In Stock' : 'Out of Stock'}
                  </dd>
                </div>
                {product.stock_level && (
                  <div class="flex">
                    <dt class="text-sm font-medium text-gray-500 w-1/3">Stock Level:</dt>
                    <dd class="text-sm text-gray-900">{product.stock_level} units</dd>
                  </div>
                )}
              </dl>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Image Zoom Modal -->
    <div 
      id="image-modal" 
      class="hidden fixed inset-0 z-50 bg-black bg-opacity-75 items-center justify-center p-4"
    >
      <div class="relative max-w-4xl max-h-full">
        <button 
          id="close-modal"
          class="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
          aria-label="Close"
        >
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <img 
          id="modal-image"
          src=""
          alt=""
          class="max-w-full max-h-full object-contain"
        />
      </div>
    </div>
  )}

</Layout>

<!-- CRITICAL: Make product data available to JavaScript -->
{!showError && product && (
  <script define:vars={{ product, productSlug: slug }}>
    // Make product data available globally for cart integration
    console.log('🛍️ Setting product data for cart:', product.id);
    window.productData = {
      id: product.id,
      name: product.name,
      slug: productSlug,
      price: product.price,
      currency: product.currency || 'EUR',
      images: product.images || [],
      options: product.options || [],
      sku: product.sku,
      stock_level: product.stock_level
    };
    
    // Debug logging
    console.log('✅ Product data set:', window.productData);
  </script>
)}

<!-- Enhanced Product Page Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get quantity controls
    const decreaseBtn = document.getElementById('decrease-quantity');
    const increaseBtn = document.getElementById('increase-quantity');
    const quantityInput = document.getElementById('quantity');
    const addToCartBtn = document.getElementById('add-to-cart-btn');

    // Quantity controls
    if (decreaseBtn && quantityInput) {
      decreaseBtn.addEventListener('click', () => {
        const current = parseInt(quantityInput.value) || 1;
        const newValue = Math.max(1, current - 1);
        quantityInput.value = newValue;
        
        // Update button data attribute
        if (addToCartBtn) {
          addToCartBtn.setAttribute('data-quantity', newValue);
        }
      });
    }

    if (increaseBtn && quantityInput) {
      increaseBtn.addEventListener('click', () => {
        const current = parseInt(quantityInput.value) || 1;
        const newValue = Math.min(10, current + 1);
        quantityInput.value = newValue;
        
        // Update button data attribute
        if (addToCartBtn) {
          addToCartBtn.setAttribute('data-quantity', newValue);
        }
      });
    }

    if (quantityInput && addToCartBtn) {
      quantityInput.addEventListener('change', (e) => {
        const value = Math.max(1, Math.min(10, parseInt(e.target.value) || 1));
        e.target.value = value;
        addToCartBtn.setAttribute('data-quantity', value);
      });
    }

    // Image gallery functionality
    const thumbnails = document.querySelectorAll('[role="tab"]');
    const mainImage = document.getElementById('main-product-image');
    
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', () => {
        const imageSrc = thumbnail.querySelector('img').src;
        if (mainImage) {
          mainImage.src = imageSrc;
        }
      });
    });

    // Image zoom modal
    const zoomTrigger = document.getElementById('zoom-trigger');
    const imageModal = document.getElementById('image-modal');
    const modalImage = document.getElementById('modal-image');
    const closeModal = document.getElementById('close-modal');

    if (zoomTrigger && imageModal && modalImage) {
      zoomTrigger.addEventListener('click', () => {
        modalImage.src = mainImage.src;
        modalImage.alt = mainImage.alt;
        imageModal.classList.remove('hidden');
        imageModal.classList.add('show');
        document.body.style.overflow = 'hidden';
      });
    }

    if (closeModal && imageModal) {
      closeModal.addEventListener('click', () => {
        imageModal.classList.remove('show');
        imageModal.classList.add('hidden');
        document.body.style.overflow = '';
      });
    }

    // Close modal on backdrop click
    if (imageModal) {
      imageModal.addEventListener('click', (e) => {
        if (e.target === imageModal) {
          imageModal.classList.remove('show');
          imageModal.classList.add('hidden');
          document.body.style.overflow = '';
        }
      });
    }

    // Debug: Check if button has required attributes
    if (addToCartBtn) {
      console.log('🛍️ Add to cart button ready with attributes:', {
        productId: addToCartBtn.getAttribute('data-product-id'),
        quantity: addToCartBtn.getAttribute('data-quantity'),
        hasCartHandler: !!window.cartHandler
      });
    }
  });
</script>

<style>
  /* Synoptic Brand Colors */
  .text-primary {
    color: rgb(51, 73, 152);
  }
  
  .bg-primary {
    background-color: rgb(51, 73, 152);
  }
  
  .bg-primary-dark {
    background-color: rgb(41, 63, 142);
  }
  
  .border-primary {
    border-color: rgb(51, 73, 152);
  }
  
  .focus\:border-primary:focus {
    border-color: rgb(51, 73, 152);
  }
  
  .focus\:ring-primary:focus {
    --tw-ring-color: rgb(51, 73, 152);
  }
  
  /* Radio button styling */
  .option-radio input[type="radio"]:checked {
    background-color: rgb(51, 73, 152);
    border-color: rgb(51, 73, 152);
  }
  
  /* Quantity input styling */
  .quantity-btn:hover {
    background-color: rgb(51, 73, 152);
    color: white;
  }
  
  /* Modal styling */
  #image-modal.show {
    display: flex;
  }

  /* Loading states */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }
</style>

<!-- Product Schema for SEO -->
{!showError && (
  <script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
)}