---
// src/pages/products/[slug].astro - Fixed version with correct Astro syntax
import Layout from '~/layouts/PageLayout.astro';
import ProductError from '~/components/ProductError.astro';
import { getProductBySlug, formatPrice, getProductImageUrls } from '~/lib/swell.js';

export async function getStaticPaths() {
  const productSlugs = ['starter-kit', 'synopticam', 'inference-credits'];
  
  return productSlugs.map(slug => ({
    params: { slug }
  }));
}

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// Fetch product data from Swell with error handling
let product = null;
let hasError = false;

try {
  product = await getProductBySlug(slug);
} catch (error) {
  console.error(`Error fetching product ${slug}:`, error);
  hasError = true;
}

// Prepare display variables
const showError = !product || hasError;
const errorType = hasError ? 'error' : 'not-found';

// Only process product data if we have a valid product
let productImages = ['/placeholder-product.jpg'];
let formattedPrice = 'Price unavailable';
let isStockAvailable = false;
let title = `Product ${slug}`;
let description = 'Product information unavailable';
let productSchema = {};

if (product && !hasError) {
  productImages = getProductImageUrls(product);
  formattedPrice = formatPrice(product.price);
  isStockAvailable = product.stock_level === null || product.stock_level > 0;
  title = product.name || `Product ${slug}`;
  description = product.description || product.meta_description || `${title} - Premium AI monitoring solution from Synoptic`;
  
  // Product schema for SEO
  productSchema = {
    "@context": "https://schema.org/",
    "@type": "Product",
    "name": product.name,
    "description": description,
    "sku": product.sku || slug,
    "brand": {
      "@type": "Brand",
      "name": "Synoptic"
    },
    "offers": {
      "@type": "Offer",
      "url": `https://synoptic.vision/products/${slug}`,
      "priceCurrency": product.currency || "EUR",
      "price": product.price,
      "availability": isStockAvailable ? "https://schema.org/InStock" : "https://schema.org/OutOfStock"
    }
  };

  if (productImages[0] !== '/placeholder-product.jpg') {
    productSchema.image = productImages;
  }
}

const pageTitle = showError ? 'Product Not Found | Synoptic' : `${title} | Synoptic`;
const pageDescription = showError ? 'The requested product could not be found.' : description;
---

<Layout metadata={{
  title: pageTitle,
  description: pageDescription,
  canonical: `https://synoptic.vision/products/${slug}`,
}}>
  
  {!showError && (
    <script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
  )}
  
  {showError ? (
    <ProductError type={errorType} productSlug={slug} />
  ) : (
    <!-- Product Page Content -->
    <section class="px-4 py-16 mx-auto max-w-6xl lg:px-8 lg:py-20">
      <div class="grid grid-cols-1 gap-8 lg:grid-cols-2 lg:gap-16">
        
        <!-- Product Images -->
        <div class="space-y-4">
          <div class="aspect-square overflow-hidden rounded-lg bg-gray-100 relative group">
            <img 
              src={productImages[0]} 
              alt={product.name}
              class="w-full h-full object-cover object-center transition-transform group-hover:scale-105"
              loading="eager"
            />
            
            <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
              <div class="bg-black bg-opacity-50 text-white p-2 rounded-lg text-sm">
                Click to zoom
              </div>
            </div>
          </div>
          
          {productImages.length > 1 && (
            <div class="grid grid-cols-4 gap-2">
              {productImages.slice(1, 5).map((imageUrl, index) => (
                <div class="aspect-square overflow-hidden rounded-lg bg-gray-100 cursor-pointer hover:opacity-75 transition-opacity">
                  <img 
                    src={imageUrl} 
                    alt={`${product.name} - View ${index + 2}`}
                    class="w-full h-full object-cover object-center"
                    loading="lazy"
                  />
                </div>
              ))}
            </div>
          )}
        </div>

        <!-- Product Information -->
        <div class="space-y-6">
          <!-- Breadcrumb -->
          <nav class="text-sm" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2">
              <li><a href="/" class="text-gray-500 hover:text-gray-700">Home</a></li>
              <li><span class="text-gray-400">/</span></li>
              <li><a href="/products" class="text-gray-500 hover:text-gray-700">Products</a></li>
              <li><span class="text-gray-400">/</span></li>
              <li><span class="text-gray-900">{product.name}</span></li>
            </ol>
          </nav>

          <!-- Product Title & Price -->
          <div>
            <h1 class="text-3xl font-bold text-gray-900 lg:text-4xl">
              {product.name}
            </h1>
            <div class="mt-4 flex items-center space-x-4">
              <span class="text-3xl font-bold text-primary">
                {formattedPrice}
              </span>
              {!isStockAvailable && (
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  Out of Stock
                </span>
              )}
            </div>
          </div>

          <!-- Product Description -->
          {product.description && (
            <div class="prose prose-sm text-gray-600 max-w-none">
              <p>{product.description}</p>
            </div>
          )}

          <!-- Key Features -->
          {product.meta_description && product.meta_description !== product.description && (
            <div class="border-t border-gray-200 pt-6">
              <h3 class="text-lg font-medium text-gray-900 mb-3">Key Features</h3>
              <p class="text-gray-600">{product.meta_description}</p>
            </div>
          )}

          <!-- Product Variants -->
          {product.variants && product.variants.length > 0 && (
            <div class="border-t border-gray-200 pt-6">
              <h3 class="text-lg font-medium text-gray-900 mb-3">Available Options</h3>
              <div class="space-y-2">
                {product.variants.map((variant) => (
                  <div class="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <span class="font-medium">{variant.name}</span>
                    <span class="text-primary font-semibold">
                      {formatPrice(variant.price)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <!-- Add to Cart Section -->
          <div class="border-t border-gray-200 pt-6">
            <div class="space-y-4">
              <!-- Quantity Selector -->
              <div class="flex items-center space-x-3">
                <label for="quantity" class="text-sm font-medium text-gray-700">
                  Quantity:
                </label>
                <select 
                  id="quantity" 
                  name="quantity"
                  class="rounded-md border border-gray-300 py-2 px-3 text-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
                >
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
                </select>
              </div>

              <!-- Add to Cart Button -->
              <button 
                type="button"
                disabled={!isStockAvailable}
                class={`w-full py-3 px-6 rounded-lg text-white font-medium transition-all duration-200 ${
                  isStockAvailable 
                    ? 'bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 active:transform active:scale-95' 
                    : 'bg-gray-300 cursor-not-allowed'
                }`}
              >
                {isStockAvailable ? (
                  <span class="flex items-center justify-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 6H2m5 7v1m0 0v5a2 2 0 002 2h6a2 2 0 002-2v-5m-8 0h8"></path>
                    </svg>
                    Add to Cart
                  </span>
                ) : (
                  'Out of Stock'
                )}
              </button>
            </div>
          </div>

          <!-- Product Details -->
          <div class="border-t border-gray-200 pt-6">
            <h3 class="text-lg font-medium text-gray-900 mb-3">Product Details</h3>
            <dl class="space-y-2">
              {product.sku && (
                <div class="flex">
                  <dt class="text-sm font-medium text-gray-500 w-1/3">SKU:</dt>
                  <dd class="text-sm text-gray-900">{product.sku}</dd>
                </div>
              )}
              <div class="flex">
                <dt class="text-sm font-medium text-gray-500 w-1/3">Availability:</dt>
                <dd class="text-sm text-gray-900">
                  {isStockAvailable ? (
                    <span class="text-green-600 font-medium">✓ In Stock</span>
                  ) : (
                    <span class="text-red-600 font-medium">✗ Out of Stock</span>
                  )}
                </dd>
              </div>
              {product.weight && (
                <div class="flex">
                  <dt class="text-sm font-medium text-gray-500 w-1/3">Weight:</dt>
                  <dd class="text-sm text-gray-900">{product.weight} lbs</dd>
                </div>
              )}
            </dl>
          </div>

          <!-- Trust Signals -->
          <div class="border-t border-gray-200 pt-6">
            <div class="grid grid-cols-2 gap-4 text-sm text-gray-600">
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Free shipping</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>30-day returns</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
                <span>Secure checkout</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
                <span>Expert support</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )}

</Layout>

<style>
  .text-primary {
    color: rgb(51, 73, 152);
  }
  
  .bg-primary {
    background-color: rgb(51, 73, 152);
  }
  
  .bg-primary-dark {
    background-color: rgb(41, 63, 142);
  }
  
  .border-primary {
    border-color: rgb(51, 73, 152);
  }
  
  .focus\:border-primary:focus {
    border-color: rgb(51, 73, 152);
  }
  
  .focus\:ring-primary:focus {
    --tw-ring-color: rgb(51, 73, 152);
  }
</style>