---
// src/pages/products/[slug].astro - Fixed version with proper product data exposure
import Layout from '~/layouts/PageLayout.astro';
import ProductError from '~/components/ProductError.astro';
import { 
  getProductBySlug, 
  getProductPricing,
  getProductImageUrls, 
  getProductDescription,
  isProductInStock,
  getProductOptions
} from '~/lib/swell.js';

export async function getStaticPaths() {
  const productSlugs = ['starter-kit', 'synopticam', 'inference-credits'];
  
  return productSlugs.map(slug => ({
    params: { slug }
  }));
}

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// Fetch product data from Swell with error handling
let product = null;
let hasError = false;

try {
  product = await getProductBySlug(slug);
  console.log('Product fetched for', slug, ':', product?.id || 'not found');
} catch (error) {
  console.error(`Error fetching product ${slug}:`, error);
  hasError = true;
}

// Prepare display variables
const showError = !product || hasError;
const errorType = hasError ? 'error' : 'not-found';

// Only process product data if we have a valid product
let productImages = ['/placeholder-product.jpg'];
let pricing = { formattedPrice: 'Price unavailable', hasOptions: false };
let stockAvailable = false;
let title = `Product ${slug}`;
let description = 'Product information unavailable';
let htmlDescription = '';
let productOptions = [];
let productSchema = {};

if (product && !hasError) {
  productImages = getProductImageUrls(product);
  pricing = getProductPricing(product);
  stockAvailable = isProductInStock(product);
  title = product.name || `Product ${slug}`;
  description = getProductDescription(product);
  htmlDescription = description;
  productOptions = getProductOptions(product);
  
  // Product schema for SEO
  productSchema = {
    "@context": "https://schema.org/",
    "@type": "Product",
    "name": product.name,
    "description": description.replace(/<[^>]*>/g, ''), // Strip HTML for schema
    "sku": product.sku || slug,
    "brand": {
      "@type": "Brand",
      "name": "Synoptic"
    },
    "offers": {
      "@type": "Offer",
      "url": `https://synoptic.vision/products/${slug}`,
      "priceCurrency": pricing.currency,
      "price": pricing.price || pricing.priceRange?.min,
      "availability": stockAvailable ? "https://schema.org/InStock" : "https://schema.org/OutOfStock"
    }
  };

  if (productImages[0] !== '/placeholder-product.jpg') {
    productSchema.image = productImages;
  }
}

const pageTitle = showError ? 'Product Not Found | Synoptic' : `${title} | Synoptic`;
const pageDescription = showError ? 'The requested product could not be found.' : description.replace(/<[^>]*>/g, '').substring(0, 160);
---

<Layout metadata={{
  title: pageTitle,
  description: pageDescription,
  canonical: `https://synoptic.vision/products/${slug}`,
}}>
  
  {!showError && (
    <script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
  )}
  
  {showError ? (
    <ProductError type={errorType} productSlug={slug} />
  ) : (
    <!-- Product Page Content -->
    <section class="px-4 py-16 mx-auto max-w-6xl lg:px-8 lg:py-20">
      <div class="grid grid-cols-1 gap-8 lg:grid-cols-2 lg:gap-16">
        
        <!-- Product Images with Working Zoom -->
        <div class="space-y-4">
          <!-- Main Image with Modal Trigger -->
          <div class="aspect-square overflow-hidden rounded-lg bg-gray-100 relative group cursor-pointer" id="main-image-container">
            <img 
              id="main-image"
              src={productImages[0]} 
              alt={product.name}
              class="w-full h-full object-cover object-center transition-transform group-hover:scale-105"
              loading="eager"
              onerror="this.src='/placeholder-product.jpg'"
            />
            
            <!-- Zoom indicator -->
            <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity bg-black bg-opacity-20">
              <div class="bg-white text-gray-800 p-3 rounded-lg text-sm font-medium shadow-lg">
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
                </svg>
                Click to zoom
              </div>
            </div>
          </div>
          
          <!-- Additional Images Gallery -->
          {productImages.length > 1 && (
            <div class="grid grid-cols-4 gap-2">
              {productImages.slice(1, 5).map((imageUrl, index) => (
                <div class="aspect-square overflow-hidden rounded-lg bg-gray-100 cursor-pointer hover:opacity-75 transition-opacity gallery-thumb">
                  <img 
                    src={imageUrl} 
                    alt={`${product.name} - View ${index + 2}`}
                    class="w-full h-full object-cover object-center"
                    loading="lazy"
                    onerror="this.style.display='none'"
                    data-full-image={imageUrl}
                  />
                </div>
              ))}
            </div>
          )}
        </div>

        <!-- Product Information -->
        <div class="space-y-6">
          <!-- Breadcrumb -->
          <nav class="text-sm" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2">
              <li><a href="/" class="text-gray-500 hover:text-gray-700">Home</a></li>
              <li><span class="text-gray-400">/</span></li>
              <li><a href="/products" class="text-gray-500 hover:text-gray-700">Products</a></li>
              <li><span class="text-gray-400">/</span></li>
              <li><span class="text-gray-900">{product.name}</span></li>
            </ol>
          </nav>

          <!-- Product Title & Price -->
          <div>
            <h1 class="text-3xl font-bold text-gray-900 lg:text-4xl">
              {product.name}
            </h1>
            <div class="mt-4 flex items-center space-x-4">
              <span class="text-3xl font-bold text-primary" id="display-price">
                {pricing.formattedPrice}
              </span>
              {!stockAvailable && (
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  Out of Stock
                </span>
              )}
              {product.sale && (
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  On Sale
                </span>
              )}
            </div>
          </div>

          <!-- Product Description -->
          {htmlDescription && (
            <div class="prose prose-sm text-gray-600 max-w-none">
              <div set:html={htmlDescription} />
            </div>
          )}

          <!-- Product Options -->
          {productOptions.length > 0 && (
            <div class="border-t border-gray-200 pt-6">
              <h3 class="text-lg font-medium text-gray-900 mb-4">Choose Options</h3>
              <div class="space-y-4" id="product-options">
                {productOptions.map((option) => (
                  <div class="option-group" data-option-id={option.id}>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      {option.name}
                      {option.required && <span class="text-red-500 ml-1">*</span>}
                    </label>
                    
                    {option.type === 'select' && (
                      <select 
                        name={`option-${option.id}`}
                        class="w-full rounded-md border border-gray-300 py-2 px-3 text-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary option-select"
                        data-option-id={option.id}
                        required={option.required}
                      >
                        <option value="">Choose {option.name}</option>
                        {option.values.map((value) => (
                          <option value={value.id} data-price={value.price}>
                            {value.name}
                            {value.formattedPrice && ` (+${value.formattedPrice})`}
                          </option>
                        ))}
                      </select>
                    )}
                    
                    {option.type === 'radio' && (
                      <div class="space-y-2">
                        {option.values.map((value) => (
                          <label class="flex items-center justify-between p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors option-radio">
                            <div class="flex items-center">
                              <input 
                                type="radio" 
                                name={`option-${option.id}`} 
                                value={value.id}
                                data-price={value.price}
                                data-option-id={option.id}
                                class="w-4 h-4 text-primary border-gray-300 focus:ring-primary"
                                required={option.required}
                              />
                              <span class="ml-3 font-medium">{value.name}</span>
                            </div>
                            {value.formattedPrice && (
                              <span class="text-primary font-semibold">
                                +{value.formattedPrice}
                              </span>
                            )}
                          </label>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <!-- Add to Cart Section -->
          <div class="border-t border-gray-200 pt-6">
            <form class="space-y-4" id="add-to-cart-form">
              <!-- Quantity Input (Number Field) -->
              <div class="flex items-center space-x-3">
                <label for="quantity" class="text-sm font-medium text-gray-700">
                  Quantity:
                </label>
                <div class="flex items-center">
                  <button 
                    type="button" 
                    class="quantity-btn minus bg-gray-100 hover:bg-gray-200 text-gray-600 w-8 h-8 rounded-l-md flex items-center justify-center border border-r-0 border-gray-300"
                    data-action="decrease"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                    </svg>
                  </button>
                  <input 
                    type="number" 
                    id="quantity" 
                    name="quantity"
                    min="1" 
                    max="99" 
                    value="1"
                    class="w-16 h-8 text-center border-t border-b border-gray-300 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary text-sm"
                  />
                  <button 
                    type="button" 
                    class="quantity-btn plus bg-gray-100 hover:bg-gray-200 text-gray-600 w-8 h-8 rounded-r-md flex items-center justify-center border border-l-0 border-gray-300"
                    data-action="increase"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Add to Cart Button -->
              <button 
                type="button"
                disabled={!stockAvailable}
                class={`w-full py-3 px-6 rounded-lg text-white font-medium transition-all duration-200 ${
                  stockAvailable 
                    ? 'bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 active:transform active:scale-95' 
                    : 'bg-gray-300 cursor-not-allowed'
                }`}
                id="add-to-cart-btn"
              >
                {stockAvailable ? (
                  <span class="flex items-center justify-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 6H2m5 7v1m0 0v5a2 2 0 002 2h6a2 2 0 002-2v-5m-8 0h8"></path>
                    </svg>
                    Add to Cart
                  </span>
                ) : (
                  'Out of Stock'
                )}
              </button>
            </form>
          </div>

          <!-- Product Details -->
          <div class="border-t border-gray-200 pt-6">
            <h3 class="text-lg font-medium text-gray-900 mb-3">Product Details</h3>
            <dl class="space-y-2">
              {product.sku && (
                <div class="flex">
                  <dt class="text-sm font-medium text-gray-500 w-1/3">SKU:</dt>
                  <dd class="text-sm text-gray-900">{product.sku}</dd>
                </div>
              )}
              <div class="flex">
                <dt class="text-sm font-medium text-gray-500 w-1/3">Availability:</dt>
                <dd class="text-sm text-gray-900">
                  {stockAvailable ? (
                    <span class="text-green-600 font-medium">✓ In Stock</span>
                  ) : (
                    <span class="text-red-600 font-medium">✗ Out of Stock</span>
                  )}
                </dd>
              </div>
              {product.weight && (
                <div class="flex">
                  <dt class="text-sm font-medium text-gray-500 w-1/3">Weight:</dt>
                  <dd class="text-sm text-gray-900">{product.weight} kg</dd>
                </div>
              )}
            </dl>
          </div>

          <!-- Trust Signals -->
          <div class="border-t border-gray-200 pt-6">
            <div class="grid grid-cols-2 gap-4 text-sm text-gray-600">
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Free shipping</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>30-day returns</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
                <span>Secure checkout</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
                <span>Expert support</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Image Zoom Modal -->
    <div id="image-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center p-4">
      <div class="relative max-w-4xl max-h-full">
        <button 
          id="close-modal" 
          class="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
          aria-label="Close zoom"
        >
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <img 
          id="modal-image" 
          src="" 
          alt=""
          class="max-w-full max-h-full object-contain"
        />
      </div>
    </div>
  )}

</Layout>

<!-- CRITICAL: Make product data available to JavaScript -->
{!showError && product && (
  <script define:vars={{ product, productSlug: slug }}>
    // Make product data available globally for cart integration
    console.log('🛍️ Setting product data for cart:', product.id);
    window.productData = {
      id: product.id,
      name: product.name,
      slug: productSlug,
      price: product.price,
      currency: product.currency || 'EUR',
      images: product.images || [],
      options: product.options || [],
      sku: product.sku,
      stock_level: product.stock_level
    };
    
    // Debug logging
    console.log('✅ Product data set:', window.productData);
  </script>
)}

<style>
  /* Synoptic Brand Colors */
  .text-primary {
    color: rgb(51, 73, 152);
  }
  
  .bg-primary {
    background-color: rgb(51, 73, 152);
  }
  
  .bg-primary-dark {
    background-color: rgb(41, 63, 142);
  }
  
  .border-primary {
    border-color: rgb(51, 73, 152);
  }
  
  .focus\:border-primary:focus {
    border-color: rgb(51, 73, 152);
  }
  
  .focus\:ring-primary:focus {
    --tw-ring-color: rgb(51, 73, 152);
  }
  
  /* Radio button styling */
  .option-radio input[type="radio"]:checked {
    background-color: rgb(51, 73, 152);
    border-color: rgb(51, 73, 152);
  }
  
  /* Quantity input styling */
  .quantity-btn:hover {
    background-color: rgb(51, 73, 152);
    color: white;
  }
  
  /* Modal styling */
  #image-modal.show {
    display: flex;
  }
</style>